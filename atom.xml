<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>水果点心</title>
  <icon>https://www.gravatar.com/avatar/14f180543e351cbfdc02a64ccbbbdbf0</icon>
  <subtitle>beautiful &amp; delicious</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://luolizhi.github.io/"/>
  <updated>2019-12-17T12:12:26.618Z</updated>
  <id>https://luolizhi.github.io/</id>
  
  <author>
    <name>lukey</name>
    <email>luolizhi1221@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>traefik v2.1</title>
    <link href="https://luolizhi.github.io/2019/12/17/traefik-v2-1/"/>
    <id>https://luolizhi.github.io/2019/12/17/traefik-v2-1/</id>
    <published>2019-12-17T12:11:20.000Z</published>
    <updated>2019-12-17T12:12:26.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="traefik-v2-1"><a href="#traefik-v2-1" class="headerlink" title="traefik v2.1"></a>traefik v2.1</h1><p>我们都知道，你们都知道：Traefik 2.0 包含了许多新功能：TCP，中间件，规则语法，YAML 支持，CRD，WebUI，canary，mirroring, provider namespaces，新文档以及许多其他不起眼的更改将帮助我们将喜爱的产品推向更高的高度。</p><!-- All this was accompanied by tools to help the community seamlessly make the transition: We developed a [migration tool](https://github.com/containous/traefik-migration-tool),  launched a [community forum](https://community.containo.us/) to foster good communication and support, wrote new tutorials to help people have a [fresh start with Traefik](https://containo.us/blog/traefik-2-0-docker-101-fc2893944b9d/) (including [details about new TLS options](https://containo.us/blog/traefik-2-tls-101-23b4fbee81f1/)), and of course we added a [migration guide in our documentation](https://docs.traefik.io/migration/v1-to-v2/). --> <p>所有这些都伴随着帮助社区无缝过渡的工具：我们开发了<a href="https://github.com/containous/traefik-migration-tool" target="_blank" rel="noopener">迁移工具</a>，发起了一个<a href="https://community.containo.us/" target="_blank" rel="noopener">社区论坛</a>以促进良好的沟通和支持，编写了新教程以帮助人们重新开始使用 <a href="https://containo.us/blog/traefik-2-0-docker-101-fc2893944b9d/" target="_blank" rel="noopener">Traefik</a>（包括有关新 TLS 的详细信息），当然我们在文档中添加了<a href="https://docs.traefik.io/migration/v1-to-v2/" target="_blank" rel="noopener">迁移指南</a>。</p><p>感谢我们从社区获得的（大量）反馈，我们知道我们可以做得更好，并且为我们提供了正确方向的一些指导。</p><p>但是在谈论我们学到的东西以及如何利用这些知识之前，让我们先谈谈 2.1 中引入的更改。</p><h2 id="Consul-Catalog-Is-Back"><a href="#Consul-Catalog-Is-Back" class="headerlink" title="Consul Catalog Is Back!"></a>Consul Catalog Is Back!</h2><p> 对于 Consul Catalog 迷来说，好消息是 Traefik 2.1 将其重新列入了受支持的提供商列表！ （但请保留，因为我确定其他人也会效仿。）</p><h2 id="Improving-the-CRD"><a href="#Improving-the-CRD" class="headerlink" title="Improving the CRD"></a>Improving the CRD</h2><h3 id="Stickiness"><a href="#Stickiness" class="headerlink" title="Stickiness"></a>Stickiness</h3><p><code>stickiness</code>是负载均衡器在将客户端发送给客户端后继续使用相同目标的功能。 我们的 CRD 用户现在可以使用此选项！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myName</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">myNamespace</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">Host(`some-domain`)</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myService</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">myNamespace</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">sticky:</span></span><br><span class="line">        <span class="attr">cookie:</span> <span class="string">&#123;&#125;</span> <span class="comment"># Once a pod is selected for a client, it will stay the same for future calls</span></span><br></pre></td></tr></table></figure><h2 id="Service-Load-Balancing-amp-Mirroring"><a href="#Service-Load-Balancing-amp-Mirroring" class="headerlink" title="Service Load Balancing &amp; Mirroring"></a>Service Load Balancing &amp; Mirroring</h2><p>在 2.0 中引入的服务负载平衡和镜像以前只能使用 <code>file provider</code> 进行配置。 通过 2.1 和 <code>TraefikService</code> 对象的引入，我们利用 Traefik 的 CRD 在 Kubernetes 中启用这种配置，这是第一个带有镜像的示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-route-to-mirroring</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`some-domain`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/some/path`)</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mirroring-example</span> <span class="comment">#targets the mirroring-example service</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">TraefikService</span> <span class="comment"># we want to target the TraefikService we've declared (and not a K8S service named mirroring-example)</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mirroring-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">mirroring:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">v1</span> <span class="comment">#sends 100% of the requests to the K8S service "v1" ...</span></span><br><span class="line">    <span class="attr">mirrors:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span> <span class="comment"># ... and sends a copy of 10% of the requests to v2</span></span><br><span class="line">        <span class="attr">percent:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>对于第二个示例，让我们看看如何使用服务负载平衡进行金丝雀部署：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-route-to-canary</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`some-domain`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/some/path`)</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mirror1</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">canary-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">weighted:</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>现在，我们可以随意更改每个服务（v1 和 v2）的权重！</p><h2 id="Mixing-Regular-Kubernetes-Services-with-TraefikServices"><a href="#Mixing-Regular-Kubernetes-Services-with-TraefikServices" class="headerlink" title="Mixing Regular (Kubernetes) Services with TraefikServices"></a>Mixing Regular (Kubernetes) Services with TraefikServices</h2><!--When you define a target (with the `name` attribute) for your `IngressRoute`, by default, it targets a regular `Service`. If you want to target the new `TraefikService` objects, you just specify the `kind` attribute. What's great with this system is that you can chain and combine them at will, creating intricate patterns depending on your needs. --><p>默认情况下，当您为 <code>IngressRoute</code> 定义目标（使用 <code>name</code> 属性）时，它以常规 <code>Service</code> 为目标。 如果要定位新的 <code>TraefikService</code> 对象，则只需指定 <code>kind</code> 属性。 该系统的优点是您可以随意链接和组合它们，并根据需要创建复杂的模式。</p><p>下面是同时利用服务和 <code>TraefikServices</code> 并同时使用镜像和服务负载平衡的示例！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="C:\Users\lukey\AppData\Local\Temp\1576463361091.png" alt="1576463361091" title>                </div>                <div class="image-caption">1576463361091</div>            </figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">route-to-mirroring</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`some-domain`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/some/path`)</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mirroring-example</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mirroring-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">mirroring:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">canary-example</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line">    <span class="attr">mirrors:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service-mirror</span></span><br><span class="line">        <span class="attr">percent:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">canary-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">weighted:</span></span><br><span class="line">    <span class="attr">services:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v1</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">80</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">v2</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="Note-on-Updating-the-CRD-for-2-1"><a href="#Note-on-Updating-the-CRD-for-2-1" class="headerlink" title="Note on Updating the CRD for 2.1"></a>Note on Updating the CRD for 2.1</h2><p>在将 <code>traefik</code> 从 v2.0 升级到 v2.1时，需要应用新的 <code>CRD</code> 并增强现有的 <code>ClusterRole</code> 定义。 您将在以下<a href="https://docs.traefik.io/migration/v2/" target="_blank" rel="noopener">指南</a>中找到方法。</p><h3 id="v2-0-to-v2-1"><a href="#v2-0-to-v2-1" class="headerlink" title="v2.0 to v2.1"></a>v2.0 to v2.1</h3><p>在 v2.1 中，添加了一个名为 <code>TraefikService</code> 的新 <code>CRD</code>。 将 <code>traefik</code> 更新到 v2.1 时，需要先增加 CRD 并增强现有的 ClusterRole 定义的权限，以允许 Traefik 使用该 CRD。</p><p>要添加该 CRD 并增加权限，需要将以下定义应用于群集。</p><p><code>TraefikService</code>  定义</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apiextensions.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CustomResourceDefinition</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefikservices.traefik.containo.us</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">group:</span> <span class="string">traefik.containo.us</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1alpha1</span></span><br><span class="line">  <span class="attr">names:</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line">    <span class="attr">plural:</span> <span class="string">traefikservices</span></span><br><span class="line">    <span class="attr">singular:</span> <span class="string">traefikservice</span></span><br><span class="line">  <span class="attr">scope:</span> <span class="string">Namespaced</span></span><br></pre></td></tr></table></figure><p><code>ClusterRole</code> , 63-70行增加了对 <code>traefikservice</code> 的支持。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik-ingress-controller</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.containo.us</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">middlewares</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.containo.us</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressroutes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.containo.us</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressroutetcps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.containo.us</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tlsoptions</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefik.containo.us</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">traefikservices</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br></pre></td></tr></table></figure><p>升级步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f  traefik-service-crd.yaml</span><br><span class="line">kubectl apply -f  traefik-ClusterRole.yaml</span><br><span class="line">kubectl <span class="built_in">set</span> image deployment/traefik traefik=traefik:v2.1 -n traefik-system</span><br></pre></td></tr></table></figure><h2 id="More-Control-On-Internal-Routing"><a href="#More-Control-On-Internal-Routing" class="headerlink" title="More Control On Internal Routing"></a>More Control On Internal Routing</h2><p>在 2.0 中，我们进行了更改，以确保人们能够正确保护 Traefik 提供的一些关键服务，例如 API 和仪表板（您可以在 Traefik＆Docker 101 <a href="https://containo.us/blog/traefik-2-0-docker-101-fc2893944b9d/" target="_blank" rel="noopener">文章</a>中看到一个示例）。 </p><p>在进一步配置内部服务的能力同时始终为用户提供更多控制权的同时，2.1 仪表板现在可以显示所涉及的内部路由器和服务。</p><h2 id="Migrating-to-2-X-Made-Easy"><a href="#Migrating-to-2-X-Made-Easy" class="headerlink" title="Migrating to 2.X Made Easy"></a>Migrating to 2.X Made Easy</h2><p>有了如此多的新选项来自定义 Traefik 以满足您的各种需求，我们了解到迁移到 2.x 时可能会有些失落，尤其是因为 Traefik 是您运行而忘记的那种软件（因为它可以昼夜工作，无需用户的任何其他干预）。</p><blockquote><p>我们一直在努力工作，以使此迁移过程只需几分钟。</p></blockquote><p>因此，如果您正在考虑迁移但还没有完成任务，我们希望为您指明正确的方向：</p><ul><li>本<a href="https://containo.us/blog/traefik-2-0-docker-101-fc2893944b9d/" target="_blank" rel="noopener">指南</a>可帮助您真正了解 Traefik 2 如何在 Docker 设置上工作，并向您显示 5 分钟足以使您充分了解如何使用它。</li><li>如果您正在寻找有关如何配置 HTTPS / TLS 的信息，我们将为您提供这个<a href="https://containo.us/blog/traefik-2-tls-101-23b4fbee81f1/" target="_blank" rel="noopener">指南</a>！</li><li>如果您不想浪费时间在 Kubernetes 中转换 Ingress 对象（谁愿意？），我们开发了一个<a href="https://github.com/containous/traefik-migration-tool" target="_blank" rel="noopener">迁移工具</a>，可以为您处理它。</li><li>哦，<a href="https://github.com/containous/traefik-migration-tool" target="_blank" rel="noopener">迁移工具</a>还可以转换您的 acme.json 证书文件。</li><li>并且始终可以随时在我们的社区论坛中进行对话，我们会阅读所有内容，并在可能的情况下尽力提供答案。</li></ul><h2 id="Supporting-the-1-X-Branch-for-Two-Years"><a href="#Supporting-the-1-X-Branch-for-Two-Years" class="headerlink" title="Supporting the 1.X Branch for Two Years!"></a>Supporting the 1.X Branch for Two Years!</h2><p>我们的社区很重要，我们不希望用户急于迁移到版本 2。我们希望看到人们逐渐爱上 Traefik 必须提供和迁移的新工具。 因此，我们决定将对 1.X 版本的支持扩展到 2021 年底。</p><p>没错：您需要先实现两年的飞跃！ （而且我们相信，在此之前，您会发现迁移到 2.X 的好处。）</p><p>原文链接：<a href="https://containo.us/blog/traefik-2-1-in-the-wild/" target="_blank" rel="noopener">https://containo.us/blog/traefik-2-1-in-the-wild/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;traefik-v2-1&quot;&gt;&lt;a href=&quot;#traefik-v2-1&quot; class=&quot;headerlink&quot; title=&quot;traefik v2.1&quot;&gt;&lt;/a&gt;traefik v2.1&lt;/h1&gt;&lt;p&gt;我们都知道，你们都知道：Traefik 2.0 包含了许多新
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
      <category term="traefik" scheme="https://luolizhi.github.io/tags/traefik/"/>
    
  </entry>
  
  <entry>
    <title>Operator SDK User Guide（翻译）</title>
    <link href="https://luolizhi.github.io/2019/11/30/operator-user-guide-v0.12/"/>
    <id>https://luolizhi.github.io/2019/11/30/operator-user-guide-v0.12/</id>
    <published>2019-11-30T02:29:38.000Z</published>
    <updated>2019-11-30T02:45:58.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Operator-SDK-用户指南-v0-12（翻译）"><a href="#Operator-SDK-用户指南-v0-12（翻译）" class="headerlink" title="Operator SDK 用户指南 v0.12（翻译）"></a>Operator SDK 用户指南 v0.12（翻译）</h1><!-- This guide walks through an example of building a simple memcached-operator using the operator-sdk CLI tool and controller-runtime library API. To learn how to use Ansible or Helm to create an operator, see the [Ansible Operator User Guide][ansible_user_guide] or the [Helm Operator User Guide][helm_user_guide]. The rest of this document will show how to program an operator in Go. --><p>本指南介绍了使用 operator-sdk CLI 工具和控制器运行时库的 API 构建简单的 memcached-operator 的示例。 要了解如何使用 Ansible 或 Helm 创建 operator，查看 <a href="./ansible/user-guide.md">Ansible Operator 用户指南</a> 或者 <a href="./helm/user-guide.md">Helm Operator 用户指南</a>。本文档的其余部分将展示如何在 Go 中编写 operator。</p><p><a href="https://github.com/operator-framework/operator-sdk/blob/v0.12.x/doc/user-guide.md" target="_blank" rel="noopener">原文链接</a></p><!-- ## Prerequisites- [git][git_tool]- [go][go_tool] version v1.12+.- [mercurial][mercurial_tool] version 3.9+- [docker][docker_tool] version 17.03+.- [kubectl][kubectl_tool] version v1.11.3+.- Access to a Kubernetes v1.11.3+ cluster.**Note**: This guide uses [minikube][minikube_tool] version v0.25.0+ as the local Kubernetes cluster and [quay.io][quay_link] for the public registry. --><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a></li><li><a href="https://golang.org/dl/" target="_blank" rel="noopener">go</a> 版本 v1.12+.</li><li><a href="https://www.mercurial-scm.org/downloads" target="_blank" rel="noopener">mercurial</a> 版本 3.9+</li><li><a href="https://docs.docker.com/install/" target="_blank" rel="noopener">docker</a> 版本 17.03+.</li><li><a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">kubectl</a> 版本 v1.11.3+.</li><li>可以访问版本 v1.11.3+ Kubernetes 集群。</li></ul><p><strong>注意</strong>：本指南使用 <a href="https://github.com/kubernetes/minikube#installation" target="_blank" rel="noopener">minikube</a> 版本 v0.25.0+ 作为本地 Kubernetes 集群，同时使用 <a href="https://quay.io" target="_blank" rel="noopener">quay.io</a> 作为公共镜像仓库。</p><!-- ## Install the Operator SDK CLIFollow the steps in the [installation guide][install_guide] to learn how to install the Operator SDK CLI tool.## Create a new projectUse the CLI to create a new memcached-operator project:--><h2 id="安装-Operator-SDK-CLI"><a href="#安装-Operator-SDK-CLI" class="headerlink" title="安装 Operator SDK CLI"></a>安装 Operator SDK CLI</h2><p>请按照 <a href="./user/install-operator-sdk.md">安装指南</a> 中的步骤进行操作，以了解如何安装 Operator SDK CLI 工具。</p><h2 id="创建一个新项目"><a href="#创建一个新项目" class="headerlink" title="创建一个新项目"></a>创建一个新项目</h2><p>使用 CLI 创建一个新的 memcached-operator 项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$HOME</span>/projects</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HOME</span>/projects</span><br><span class="line">$ operator-sdk new memcached-operator --repo=github.com/example-inc/memcached-operator</span><br><span class="line">$ <span class="built_in">cd</span> memcached-operator</span><br></pre></td></tr></table></figure><!-- To learn about the project directory structure, see [project layout][layout_doc] doc. --><p>要了解项目目录结构，请查看 <a href="./project_layout.md">项目布局</a> 文档。</p><!-- #### A note on dependency management`operator-sdk new` generates a `go.mod` file to be used with [Go modules][go_mod_wiki]. The `--repo=<path>` flag is required when creating a project outside of `$GOPATH/src`, as scaffolded files require a valid module path. Ensure you activate module support before using the SDK. From the [Go modules Wiki][go_mod_wiki]:> You can activate module support in one of two ways:> - Invoke the go command in a directory with a valid go.mod file in the current directory or any parent of it and the environment variable GO111MODULE unset (or explicitly set to auto).> - Invoke the go command with GO111MODULE=on environment variable set. --><h4 id="有关依赖管理的说明"><a href="#有关依赖管理的说明" class="headerlink" title="有关依赖管理的说明"></a>有关依赖管理的说明</h4><p><code>operator-sdk new</code> 生成一个 <code>go.mod</code> 文件，该文件供 <a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">Go modules</a> 使用。 当在 <code>$GOPATH/src</code> 路径之外创建项目时， 必须使用 <code>--repo=&lt;path&gt;</code> 参数，因为脚手架文件需要一个有效的模块路径。使用 SDK 之前，请确认开启支持 go module。从 <a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">Go modules Wiki</a> 中：</p><blockquote><p>你能通过以下两种方式之一开启支持 go module：</p><ul><li>调用 go 命令的当前目录或其任何父目录中具有有效 go.mod 文件，并且未设置环境变量 GO111MODULE（或将其显式设置为 auto）。</li><li>使用 go 命令设置 GO111MODULE=on 环境变量。</li></ul></blockquote><!-- ##### VendoringBy default `--vendor=false`, so an operator's dependencies are downloaded and cached in the Go modules cache. Calls to `go {build,clean,get,install,list,run,test}` by `operator-sdk` subcommands will use an external modules directory. Execute `go help modules` for more information.The Operator SDK can create a [`vendor`][go_vendoring] directory for Go dependencies if the project is initialized with `--vendor=true`.--><h5 id="Vendoring"><a href="#Vendoring" class="headerlink" title="Vendoring"></a>Vendoring</h5><p>默认情况下 <code>--vendor=false</code>，因此 operator 的依赖项下载并缓存在 Go modules 缓存中。通过 <code>operator-sdk</code> 子命令对 <code>go {build,clean,get,install,list,run,test}</code> 的条用将会使用一个外部 modules 目录。执行 <code>go help modules</code> 获取更多信息。</p><p>项目初始化使用 <code>--vendor=true</code> 参数，Operator SDK 能够为 Go 项目依赖创建 <a href="https://blog.gopheracademy.com/advent-2015/vendor-folder/" target="_blank" rel="noopener"><code>vendor</code></a> 文件夹。</p><!-- #### Operator scopeRead the [operator scope][operator_scope] documentation on how to run your operator as namespace-scoped vs cluster-scoped. --><h4 id="Operator-范围"><a href="#Operator-范围" class="headerlink" title="Operator 范围"></a>Operator 范围</h4><p>阅读 <a href="./operator-scope.md">operator scope</a> 文档，了解如何在命令空间范围或者集群范围内运行你的operator。</p><!-- ### ManagerThe main program for the operator `cmd/manager/main.go` initializes and runs the [Manager][manager_go_doc].The Manager will automatically register the scheme for all custom resources defined under `pkg/apis/...` and run all controllers under `pkg/controller/...`.The Manager can restrict the namespace that all controllers will watch for resources:<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := manager.New(cfg, manager.Options&#123;Namespace: namespace&#125;)</span><br></pre></td></tr></table></figure><p>By default this will be the namespace that the operator is running in. To watch all namespaces leave the namespace option empty:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := manager.New(cfg, manager.Options&#123;Namespace: <span class="string">""</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>By default the main program will set the manager’s namespace using the value of <code>WATCH_NAMESPACE</code> env defined in <code>deploy/operator.yaml</code>.<br> –&gt;</p><h3 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h3><p>operator 的主程序位于 <code>cmd/manager/main.go</code> 会初始化并运行 <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/manager#Manager">Manager</a>。</p><p>Manager 会自动为 <code>pkg/apis/...</code> 下所有自定义资源注册 scheme，并运行 <code>pkg/controller/...</code> 下所有的控制器。</p><p>Manager 可以限制所有控制器将监听资源的名称空间：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := manager.New(cfg, manager.Options&#123;Namespace: namespace&#125;)</span><br></pre></td></tr></table></figure></p><p>默认情况下，operator 只会监听其运行的名称空间的资源。要监听所有名称空间，请将名称空间选项留空：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mgr, err := manager.New(cfg, manager.Options&#123;Namespace: <span class="string">""</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>默认情况下，主程序将会使用定义在 <code>deploy/operator.yaml</code> 中 <code>WATCH_NAMESPACE</code> 的值设置 manager 的名称空间的值。</p><!-- ## Add a new Custom Resource DefinitionAdd a new Custom Resource Definition(CRD) API called Memcached, with APIVersion `cache.example.com/v1alpha1` and Kind `Memcached`.<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk add api --api-version=cache.example.com/v1alpha1 --kind=Memcached</span><br></pre></td></tr></table></figure><p>This will scaffold the Memcached resource API under <code>pkg/apis/cache/v1alpha1/...</code>.<br> –&gt;</p><h2 id="添加新的自定义资源定义"><a href="#添加新的自定义资源定义" class="headerlink" title="添加新的自定义资源定义"></a>添加新的自定义资源定义</h2><p>使用 APIVersion 值为 <code>cache.example.com/v1alpha1</code> 和 Kind 值为 <code>Memcached</code> 来添加一个名为 Memcached 的自定义资源定义（CRD）API。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk add api --api-version=cache.example.com/v1alpha1 --kind=Memcached</span><br></pre></td></tr></table></figure><p>这将在 <code>pkg/apis/cache/v1alpha1/...</code> 目录下生成 Memcached 资源 API。</p><!-- ### Define the spec and statusModify the spec and status of the `Memcached` Custom Resource(CR) at `pkg/apis/cache/v1alpha1/memcached_types.go`:<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MemcachedSpec <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Size is the size of the memcached deployment</span></span><br><span class="line">Size <span class="keyword">int32</span> <span class="string">`json:"size"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> MemcachedStatus <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Nodes are the names of the memcached pods</span></span><br><span class="line">Nodes []<span class="keyword">string</span> <span class="string">`json:"nodes"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After modifying the <code>*_types.go</code> file always run the following command to update the generated code for that resource type:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk generate k8s</span><br></pre></td></tr></table></figure><p> –&gt;</p><h3 id="定义规格和状态"><a href="#定义规格和状态" class="headerlink" title="定义规格和状态"></a>定义规格和状态</h3><p>在 <code>pkg/apis/cache/v1alpha1/memcached_types.go</code> 处修改  <code>Memcached</code> 自定义资源(CR) 的spec 和 status：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MemcachedSpec <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Size is the size of the memcached deployment</span></span><br><span class="line">Size <span class="keyword">int32</span> <span class="string">`json:"size"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> MemcachedStatus <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Nodes are the names of the memcached pods</span></span><br><span class="line">Nodes []<span class="keyword">string</span> <span class="string">`json:"nodes"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>*_types.go</code> 之后，始终运行以下命令更新该资源类型的生成代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk generate k8s</span><br></pre></td></tr></table></figure><!-- ### OpenAPI validationTo update the OpenAPI validation section in the CRD `deploy/crds/cache.example.com_memcacheds_crd.yaml`, run the following command.<figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> operator-sdk generate openapi</span></span><br></pre></td></tr></table></figure><p>This validation section allows Kubernetes to validate the properties in a Memcached Custom Resource when it is created or updated. An example of the generated YAML is as follows:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">validation:</span></span><br><span class="line">    <span class="attr">openAPIV3Schema:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">properties:</span></span><br><span class="line">            <span class="attr">size:</span></span><br><span class="line">              <span class="attr">format:</span> <span class="string">int32</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">integer</span></span><br></pre></td></tr></table></figure><p>To learn more about OpenAPI v3.0 validation schemas in Custom Resource Definitions, refer to the <a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#specifying-a-structural-schema">Kubernetes Documentation</a>.<br> –&gt;</p><h3 id="OpenAPI-验证"><a href="#OpenAPI-验证" class="headerlink" title="OpenAPI 验证"></a>OpenAPI 验证</h3><p>要更新CRD <code>deploy/crds/cache.example.com_memcacheds_crd.yaml</code> 中的 OpenAPI 验证部分，请运行以下命令。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> operator-sdk generate openapi</span></span><br></pre></td></tr></table></figure><p>该验证部分允许 Kubernetes 在创建或更新 Memcached 自定义资源时验证其属性。 生成的 YAML 的示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">validation:</span></span><br><span class="line">    <span class="attr">openAPIV3Schema:</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">properties:</span></span><br><span class="line">            <span class="attr">size:</span></span><br><span class="line">              <span class="attr">format:</span> <span class="string">int32</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">integer</span></span><br></pre></td></tr></table></figure><p>要在 “自定义资源定义” 中了解有关 OpenAPI v3.0 验证架构的更多信息，请参考 <a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#specifying-a-structural-schema">Kubernetes Documentation</a> 文档。</p><!-- ## Add a new ControllerAdd a new [Controller][controller-go-doc] to the project that will watch and reconcile the Memcached resource:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk add controller --api-version=cache.example.com/v1alpha1 --kind=Memcached</span><br></pre></td></tr></table></figure><p>This will scaffold a new Controller implementation under <code>pkg/controller/memcached/...</code>.</p><p>For this example replace the generated Controller file <code>pkg/controller/memcached/memcached_controller.go</code> with the example <a href="../example/memcached-operator/memcached_controller.go.tmpl"><code>memcached_controller.go</code></a> implementation.</p><p>The example Controller executes the following reconciliation logic for each <code>Memcached</code> CR:</p><ul><li>Create a memcached Deployment if it doesn’t exist</li><li>Ensure that the Deployment size is the same as specified by the <code>Memcached</code> CR spec</li><li>Update the <code>Memcached</code> CR status using the status writer with the names of the memcached pods</li></ul><p>The next two subsections explain how the Controller watches resources and how the reconcile loop is triggered. Skip to the <a href="#build-and-run-the-operator">Build</a> section to see how to build and run the operator.<br> –&gt;</p><h2 id="添加一个新的控制器"><a href="#添加一个新的控制器" class="headerlink" title="添加一个新的控制器"></a>添加一个新的控制器</h2><p>向项目中增加一个新的 <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg#hdr-Controller">控制器</a>，该项目就能监听并调和 Memcached 资源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk add controller --api-version=cache.example.com/v1alpha1 --kind=Memcached</span><br></pre></td></tr></table></figure><p>这将在 <code>pkg/controller/memcached/...</code> 目录下生成新的控制器实现。</p><p>在此示例中，将生成的控制器文件 <code>pkg/controller/memcached/memcached_controller.go</code> 替换为示例 <a href="../example/memcached-operator/memcached_controller.go.tmpl"><code>memcached_controller.go</code></a> 实现。</p><p>示例控制器对每一个 <code>Memcached</code> CR 执行以下调和逻辑：</p><ul><li>创建 memcached Deployment（如果不存在）</li><li>确认 Deployment 的大小与  <code>Memcached</code> CR spec 的值大小相同</li><li>使用状态写入器将memcached pods 名称更新 <code>Memcached</code> CR status 值</li></ul><p>接下来的两个小节说明了 Controller 如何监听资源以及如何触发调和循环。跳至 <a href="#build-and-run-the-operator">Build</a> 部分以了解如何构建和运行operator。 </p><!-- ### Resources watched by the ControllerInspect the Controller implementation at `pkg/controller/memcached/memcached_controller.go` to see how the Controller watches resources.The first watch is for the Memcached type as the primary resource. For each Add/Update/Delete event the reconcile loop will be sent a reconcile `Request` (a namespace/name key) for that Memcached object:<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">err := c.Watch(</span><br><span class="line">  &amp;source.Kind&#123;Type: &amp;cachev1alpha1.Memcached&#123;&#125;&#125;, &amp;handler.EnqueueRequestForObject&#123;&#125;)</span><br></pre></td></tr></table></figure><p>The next watch is for Deployments but the event handler will map each event to a reconcile <code>Request</code> for the owner of the Deployment. Which in this case is the Memcached object for which the Deployment was created. This allows the controller to watch Deployments as a secondary resource.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err := c.Watch(&amp;source.Kind&#123;Type: &amp;appsv1.Deployment&#123;&#125;&#125;, &amp;handler.EnqueueRequestForOwner&#123;</span><br><span class="line">    IsController: <span class="literal">true</span>,</span><br><span class="line">    OwnerType:    &amp;cachev1alpha1.Memcached&#123;&#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p> –&gt;</p><h3 id="控制器监听的资源"><a href="#控制器监听的资源" class="headerlink" title="控制器监听的资源"></a>控制器监听的资源</h3><p>在 <code>pkg/controller/memcached/memcached_controller.go</code> 上检查 Controller 的实现，以查看 Controller 如何监听资源。</p><p>首先要注意的是将 Memcached 类型作为一级资源。对于每一个 Add/Update/Delete 事件，将向调和循环发送该 Memcached 对象的调和 <code>Request</code> (一个 名称空间/名字 关键字)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">err := c.Watch(</span><br><span class="line">  &amp;source.Kind&#123;Type: &amp;cachev1alpha1.Memcached&#123;&#125;&#125;, &amp;handler.EnqueueRequestForObject&#123;&#125;)</span><br></pre></td></tr></table></figure><p>下一个监听对象是 Deployments，但事件处理程序会将每个事件映射到 Deployment 所有者的调和 <code>Request</code> 中。 在本例中就是 Memcached 对象，因为 Memcached 对象创建了 Deployment 。 这使控制器可以将 Deployment 视为二级资源来监听。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err := c.Watch(&amp;source.Kind&#123;Type: &amp;appsv1.Deployment&#123;&#125;&#125;, &amp;handler.EnqueueRequestForOwner&#123;</span><br><span class="line">    IsController: <span class="literal">true</span>,</span><br><span class="line">    OwnerType:    &amp;cachev1alpha1.Memcached&#123;&#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><!-- #### Controller configurationsThere are a number of useful configurations that can be made when initialzing a controller and declaring the watch parameters. For more details on these configurations consult the upstream [controller godocs][controller_godocs]. - Set the max number of concurrent Reconciles for the controller via the [`MaxConcurrentReconciles`][controller_options]  option. Defaults to 1.  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, err := controller.New(<span class="string">"memcached-controller"</span>, mgr, controller.Options&#123;</span><br><span class="line"> MaxConcurrentReconciles: <span class="number">2</span>,</span><br><span class="line"> ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>Filter watch events using <a href="./user/event-filtering.md">predicates</a></li><li>Choose the type of <a href="https://godoc.org/sigs.k8s.io/controller-runtime/pkg/handler#hdr-EventHandlers">EventHandler</a> to change how a watch event will translate to reconcile requests for the reconcile loop. For operator relationships that are more complex than primary and secondary resources, the <a href="https://godoc.org/sigs.k8s.io/controller-runtime/pkg/handler#EnqueueRequestsFromMapFunc"><code>EnqueueRequestsFromMapFunc</code></a> handler can be used to transform a watch event into an arbitrary set of reconcile requests.<br>–&gt;<h4 id="Controller-配置"><a href="#Controller-配置" class="headerlink" title="Controller 配置"></a>Controller 配置</h4></li></ul><p>初始化控制器和声明监听参数时，可以进行许多有用的配置。有关这些配置的更多详细信息，请查看上游 <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/controller">controller godocs</a> 文档。</p><ul><li><p>通过 <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/controller#Options"><code>MaxConcurrentReconciles</code></a> 参数设置控制器的最大并发调和数。默认值是1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, err := controller.New(<span class="string">"memcached-controller"</span>, mgr, controller.Options&#123;</span><br><span class="line"> MaxConcurrentReconciles: <span class="number">2</span>,</span><br><span class="line"> ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用 <a href="./user/event-filtering.md">predicates</a> 过滤监听事件</p></li><li>选择 <a href="https://godoc.org/sigs.k8s.io/controller-runtime/pkg/handler#hdr-EventHandlers">EventHandler</a> 的类型来修改监听事件将如何转换为调和循环的调和请求。 operator 的关系比一级资源和二级资源更加复杂，使用 <a href="https://godoc.org/sigs.k8s.io/controller-runtime/pkg/handler#EnqueueRequestsFromMapFunc"><code>EnqueueRequestsFromMapFunc</code></a> 能将监听事件转换成任意的调和请求集。</li></ul><!-- ### Reconcile loopEvery Controller has a Reconciler object with a `Reconcile()` method that implements the reconcile loop. The reconcile loop is passed the [`Request`][request-go-doc] argument which is a Namespace/Name key used to lookup the primary resource object, Memcached, from the cache:<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReconcileMemcached)</span> <span class="title">Reconcile</span><span class="params">(request reconcile.Request)</span> <span class="params">(reconcile.Result, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// Lookup the Memcached instance for this reconcile request</span></span><br><span class="line">  memcached := &amp;cachev1alpha1.Memcached&#123;&#125;</span><br><span class="line">  err := r.client.Get(context.TODO(), request.NamespacedName, memcached)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Based on the return values, <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/reconcile#Result"><code>Result</code></a> and error, the <code>Request</code> may be requeued and the reconcile loop may be triggered again:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reconcile successful - don't requeue</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line"><span class="comment">// Reconcile failed due to error - requeue</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, err</span><br><span class="line"><span class="comment">// Requeue for any reason other than error</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;Requeue: <span class="literal">true</span>&#125;, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>You can set the <code>Result.RequeueAfter</code> to requeue the <code>Request</code> after a grace period as well:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reconcile for any reason than error after 5 seconds</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;RequeueAfter: time.Second*<span class="number">5</span>&#125;, <span class="literal">nil</span></span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong> Returning <code>Result</code> with <code>RequeueAfter</code> set is how you can periodically reconcile a CR.</p><p>For a guide on Reconcilers, Clients, and interacting with resource Events, see the <a href="./user/client.md">Client API doc</a>.<br> –&gt;</p><h3 id="调和循环"><a href="#调和循环" class="headerlink" title="调和循环"></a>调和循环</h3><p>每个 Controller 都有一个 Reconciler 对象，该对象有实现了调和循环的 <code>Reconcile()</code> 方法。 该方法接受 <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/reconcile#Request"><code>Request</code></a> 参数，这个参数的 Namespace/Name 值用来从缓存中查找一级资源对象 Memcached：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReconcileMemcached)</span> <span class="title">Reconcile</span><span class="params">(request reconcile.Request)</span> <span class="params">(reconcile.Result, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// Lookup the Memcached instance for this reconcile request</span></span><br><span class="line">  memcached := &amp;cachev1alpha1.Memcached&#123;&#125;</span><br><span class="line">  err := r.client.Get(context.TODO(), request.NamespacedName, memcached)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据返回值，<a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/reconcile#Result"><code>Result</code></a> 和 error，这个 <code>Request</code> 可能会重新入队列并可能再次触发协和循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reconcile successful - don't requeue</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line"><span class="comment">// Reconcile failed due to error - requeue</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, err</span><br><span class="line"><span class="comment">// Requeue for any reason other than error</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;Requeue: <span class="literal">true</span>&#125;, <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>你还可以将 <code>Result.RequeueAfter</code> 设置成在一段时间后 <code>Request</code> 重新进入队列：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reconcile for any reason than error after 5 seconds</span></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;RequeueAfter: time.Second*<span class="number">5</span>&#125;, <span class="literal">nil</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 通过设置返回值 <code>Result</code> 中的 <code>RequeueAfter</code> 可以定期的调和一个 CR 资源。 </p><p>有关调和器，客户端以及与资源事件的交互指南，请查看 <a href="./user/client.md">Client API doc</a>。</p><!-- ## Build and run the operatorBefore running the operator, the CRD must be registered with the Kubernetes apiserver:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f deploy/crds/cache.example.com_memcacheds_crd.yaml</span><br></pre></td></tr></table></figure><p>Once this is done, there are two ways to run the operator:</p><ul><li>As a Deployment inside a Kubernetes cluster</li><li>As Go program outside a cluster<br>–&gt;<h2 id="构建并运行-operator"><a href="#构建并运行-operator" class="headerlink" title="构建并运行 operator"></a>构建并运行 operator</h2></li></ul><p>在运行 operator 之前，CRD 必须注册到 Kubernetes apiserver 中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f deploy/crds/cache.example.com_memcacheds_crd.yaml</span><br></pre></td></tr></table></figure><p>完成此操作后，有两种方法可以运行 operator：</p><ul><li>在 Kubernetes 集群中的deploymet</li><li>在 Kubernetes 集外的 Go 程序</li></ul><!-- ### 1. Run as a Deployment inside the cluster**Note**: `operator-sdk build` invokes `docker build` by default, and optionally `buildah bud`. If using `buildah`, skip to the `operator-sdk build` invocation instructions below. If using `docker`, make sure your docker daemon is running and that you can run the docker client without sudo. You can check if this is the case by running `docker version`, which should complete without errors. Follow instructions for your OS/distribution on how to start the docker daemon and configure your access permissions, if needed.**Note**: If a `vendor/` directory is present, run --><h3 id="1-在集群中运行一个deploymet"><a href="#1-在集群中运行一个deploymet" class="headerlink" title="1. 在集群中运行一个deploymet"></a>1. 在集群中运行一个deploymet</h3><p><strong>注意</strong>: 默认情况下，<code>operator-sdk build</code> 会调用 <code>docker build</code>，也可以选择调用 <code>buildah bud</code>。如果使用 <code>buildah</code>，请跳到下面的 <code>operator-sdk build</code> 调用说明。如果使用 <code>docker</code>，确认你的 docker 守护进程正在运行，并且可以在没有 sudo 的情况下运行 docker 客户端。您可以通过运行 docker version 来检查是否存在这种情况，该版本应该正确无误。 请根据你的 OS/distribution 上的说明，了解如何启动 docker 守护进程并根据需要配置访问权限。</p><p><strong>注意</strong>: 如果存在 <code>vendor/</code> 目录，运行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod vendor</span><br></pre></td></tr></table></figure><!-- before building the memcached-operator image.Build the memcached-operator image and push it to a registry: --><p>在构建 memcached-operator 镜像之前。</p><p>构建 memcached-operator 镜像并推送到镜像仓库：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk build quay.io/example/memcached-operator:v0.0.1</span><br><span class="line">$ sed -i <span class="string">'s|REPLACE_IMAGE|quay.io/example/memcached-operator:v0.0.1|g'</span> deploy/operator.yaml</span><br><span class="line">$ docker push quay.io/example/memcached-operator:v0.0.1</span><br></pre></td></tr></table></figure></p><!-- **Note**If you are performing these steps on OSX, use the following `sed` command instead:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">""</span> <span class="string">'s|REPLACE_IMAGE|quay.io/example/memcached-operator:v0.0.1|g'</span> deploy/operator.yaml</span><br></pre></td></tr></table></figure><p>The Deployment manifest is generated at <code>deploy/operator.yaml</code>. Be sure to update the deployment image as shown above since the default is just a placeholder.</p><p>Setup RBAC and deploy the memcached-operator:<br> –&gt;<br><strong>注意</strong><br>如果你是在 OSX 系统上执行，使用下面的 <code>sed</code> 命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i <span class="string">""</span> <span class="string">'s|REPLACE_IMAGE|quay.io/example/memcached-operator:v0.0.1|g'</span> deploy/operator.yaml</span><br></pre></td></tr></table></figure></p><p>部署清单在 <code>deploy/operator.yaml</code> 目录中生成。由于默认值是一个占位符，因此请确认按照上述命令更新 deployment 镜像。</p><p>设置 RBAC 然后部署 memcached-operator：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create -f deploy/service_account.yaml</span><br><span class="line">$ kubectl create -f deploy/role.yaml</span><br><span class="line">$ kubectl create -f deploy/role_binding.yaml</span><br><span class="line">$ kubectl create -f deploy/operator.yaml</span><br></pre></td></tr></table></figure><!-- Verify that the memcached-operator is up and running: --><p>验证 memcached-operator 已经启动并正在运行:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment</span><br><span class="line">NAME                     DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">memcached-operator       1         1         1            1           1m</span><br></pre></td></tr></table></figure><!-- ### 2. Run locally outside the clusterThis method is preferred during development cycle to deploy and test faster.Set the name of the operator in an environment variable:<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OPERATOR_NAME=memcached-operator</span><br></pre></td></tr></table></figure><p>Run the operator locally with the default Kubernetes config file present at <code>$HOME/.kube/config</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk up <span class="built_in">local</span> --namespace=default</span><br><span class="line">2018/09/30 23:10:11 Go Version: go1.10.2</span><br><span class="line">2018/09/30 23:10:11 Go OS/Arch: darwin/amd64</span><br><span class="line">2018/09/30 23:10:11 operator-sdk Version: 0.0.6+git</span><br><span class="line">2018/09/30 23:10:12 Registering Components.</span><br><span class="line">2018/09/30 23:10:12 Starting the Cmd.</span><br></pre></td></tr></table></figure><p>You can use a specific kubeconfig via the flag <code>--kubeconfig=&lt;path/to/kubeconfig&gt;</code>.<br> –&gt;</p><h3 id="2-在集群外本地运行"><a href="#2-在集群外本地运行" class="headerlink" title="2. 在集群外本地运行"></a>2. 在集群外本地运行</h3><p>在开发周期中，首选此方法来更快地部署和测试。</p><p>设置一个 operator 名称的环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OPERATOR_NAME=memcached-operator</span><br></pre></td></tr></table></figure><p>使用保存 <code>$HOME/.kube/config</code> 中的默认 kubernetes 配置文件在本地运行 operator：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ operator-sdk up <span class="built_in">local</span> --namespace=default</span><br><span class="line">2018/09/30 23:10:11 Go Version: go1.10.2</span><br><span class="line">2018/09/30 23:10:11 Go OS/Arch: darwin/amd64</span><br><span class="line">2018/09/30 23:10:11 operator-sdk Version: 0.0.6+git</span><br><span class="line">2018/09/30 23:10:12 Registering Components.</span><br><span class="line">2018/09/30 23:10:12 Starting the Cmd.</span><br></pre></td></tr></table></figure><p>你可以通过参数 <code>--kubeconfig=&lt;path/to/kubeconfig&gt;</code> 指定特定的 kubeconfig 使用。</p><!-- ## Create a Memcached CRCreate the example `Memcached` CR that was generated at `deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml`: --><h2 id="创建一个-Memcached-CR"><a href="#创建一个-Memcached-CR" class="headerlink" title="创建一个 Memcached CR"></a>创建一个 Memcached CR</h2><p>示例 <code>Memcached</code> CR 会生成在 <code>deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml</code> 中：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml</span><br><span class="line">apiVersion: <span class="string">"cache.example.com/v1alpha1"</span></span><br><span class="line">kind: <span class="string">"Memcached"</span></span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="string">"example-memcached"</span></span><br><span class="line">spec:</span><br><span class="line">  size: 3</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml</span><br></pre></td></tr></table></figure></p><!-- Ensure that the memcached-operator creates the deployment for the CR: --><p>确认 memcached-operator 为 CR 创建了 deployment：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment</span><br><span class="line">NAME                     DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">memcached-operator       1         1         1            1           2m</span><br><span class="line">example-memcached        3         3         3            3           1m</span><br></pre></td></tr></table></figure><!-- Check the pods and CR status to confirm the status is updated with the memcached pod names: --><p>检查 pods 和 CR 的状态以确认其状态已经用 memcached pod 名称更新了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                                  READY     STATUS    RESTARTS   AGE</span><br><span class="line">example-memcached-6fd7c98d8-7dqdr     1/1       Running   0          1m</span><br><span class="line">example-memcached-6fd7c98d8-g5k7v     1/1       Running   0          1m</span><br><span class="line">example-memcached-6fd7c98d8-m7vn7     1/1       Running   0          1m</span><br><span class="line">memcached-operator-7cc7cfdf86-vvjqk   1/1       Running   0          2m</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get memcached/example-memcached -o yaml</span><br><span class="line">apiVersion: cache.example.com/v1alpha1</span><br><span class="line">kind: Memcached</span><br><span class="line">metadata:</span><br><span class="line">  clusterName: <span class="string">""</span></span><br><span class="line">  creationTimestamp: 2018-03-31T22:51:08Z</span><br><span class="line">  generation: 0</span><br><span class="line">  name: example-memcached</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">"245453"</span></span><br><span class="line">  selfLink: /apis/cache.example.com/v1alpha1/namespaces/default/memcacheds/example-memcached</span><br><span class="line">  uid: 0026cc97-3536-11e8-bd83-0800274106a1</span><br><span class="line">spec:</span><br><span class="line">  size: 3</span><br><span class="line">status:</span><br><span class="line">  nodes:</span><br><span class="line">  - example-memcached-6fd7c98d8-7dqdr</span><br><span class="line">  - example-memcached-6fd7c98d8-g5k7v</span><br><span class="line">  - example-memcached-6fd7c98d8-m7vn7</span><br></pre></td></tr></table></figure><!-- ### Update the sizeChange the `spec.size` field in the memcached CR from 3 to 4 and apply the change: --><h3 id="更新大小"><a href="#更新大小" class="headerlink" title="更新大小"></a>更新大小</h3><p>将 memcached CR 中的 <code>spec.size</code> 字段从3更改为4，并应用更改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml</span><br><span class="line">apiVersion: <span class="string">"cache.example.com/v1alpha1"</span></span><br><span class="line">kind: <span class="string">"Memcached"</span></span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="string">"example-memcached"</span></span><br><span class="line">spec:</span><br><span class="line">  size: 4</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml</span><br></pre></td></tr></table></figure><!-- Confirm that the operator changes the deployment size: --><p>确认 operator 改变了 deployment 的大小：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get deployment</span><br><span class="line">NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">example-memcached    4         4         4            4           5m</span><br></pre></td></tr></table></figure><!-- ### CleanupClean up the resources: --><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>清理资源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete -f deploy/crds/cache.example.com_v1alpha1_memcached_cr.yaml</span><br><span class="line">$ kubectl delete -f deploy/operator.yaml</span><br><span class="line">$ kubectl delete -f deploy/role_binding.yaml</span><br><span class="line">$ kubectl delete -f deploy/role.yaml</span><br><span class="line">$ kubectl delete -f deploy/service_account.yaml</span><br></pre></td></tr></table></figure><!-- ## Advanced Topics### Adding 3rd Party Resources To Your OperatorThe operator's Manager supports the Core Kubernetes resource types as found in the client-go [scheme][scheme_package] package and will also register the schemes of all custom resource types defined in your project under `pkg/apis`. --><h2 id="进阶主题"><a href="#进阶主题" class="headerlink" title="进阶主题"></a>进阶主题</h2><h3 id="增加第三方资源到你的-operator-中"><a href="#增加第三方资源到你的-operator-中" class="headerlink" title="增加第三方资源到你的 operator 中"></a>增加第三方资源到你的 operator 中</h3><p>operator 的 Manager 支持在 client-go <a href="https://github.com/kubernetes/client-go/blob/master/kubernetes/scheme/register.go" target="_blank" rel="noopener">scheme</a> 包中找到 Kubernetes 核心资源类型，并将你项目中 <code>pkg/apis</code> 目录下定义的所有自定义资源类型的 schemes 注册到 Kubernetes apiserver 中。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"github.com/example-inc/memcached-operator/pkg/apis"</span></span><br><span class="line">  ...</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup Scheme for all resources</span></span><br><span class="line"><span class="keyword">if</span> err := apis.AddToScheme(mgr.GetScheme()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Error(err, <span class="string">""</span>)</span><br><span class="line">  os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- To add a 3rd party resource to an operator, you must add it to the Manager's scheme. By creating an `AddToScheme()` method or reusing one you can easily add a resource to your scheme. An [example][deployments_register] shows that you define a function and then use the [runtime][runtime_package] package to create a `SchemeBuilder`.#### Register with the Manager's schemeCall the `AddToScheme()` function for your 3rd party resource and pass it the Manager's scheme via `mgr.GetScheme()`.Example: --><p>要将第三方资源添加到 operator 中，你必须将其添加到 Manager’s scheme 中。通过创建一个 <code>AddToScheme()</code> 方法或者重用一个方法，你可以轻松地将资源加到你的 scheme 中。一个<a href="https://github.com/kubernetes/api/blob/master/apps/v1/register.go#L41" target="_blank" rel="noopener">示例]</a> 显示你定义一个函数，然后使用 <a href="https://godoc.org/k8s.io/apimachinery/pkg/runtime" target="_blank" rel="noopener">runtime</a> 包创建一个 <code>SchemeBuilder</code>。</p><h3 id="注册-Manager-的-scheme"><a href="#注册-Manager-的-scheme" class="headerlink" title="注册 Manager 的 scheme"></a>注册 Manager 的 scheme</h3><p>为你的第三方资源调用 <code>AddToScheme()</code> 方法，并通过 <code>mgr.GetScheme()</code> 将其传递给 Manager’s scheme。</p><p>示例：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">  routev1 <span class="string">"github.com/openshift/api/route/v1"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adding the routev1</span></span><br><span class="line">  <span class="keyword">if</span> err := routev1.AddToScheme(mgr.GetScheme()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Error(err, <span class="string">""</span>)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setup all Controllers</span></span><br><span class="line">  <span class="keyword">if</span> err := controller.AddToManager(mgr); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Error(err, <span class="string">""</span>)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!--**NOTES:*** After adding new import paths to your operator project, run `go mod vendor` if a `vendor/` directory is present in the root of your project directory to fulfill these dependencies.* Your 3rd party resource needs to be added before add the controller in `"Setup all Controllers"`.### Handle Cleanup on DeletionTo implement complex deletion logic, you can add a finalizer to your Custom Resource. This will prevent your Custom Resource from beingdeleted until you remove the finalizer (ie, after your cleanup logic has successfully run). For more information, see the[official Kubernetes documentation on finalizers](https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#finalizers).**Example:**The following is a snippet from the controller file under `pkg/controller/memcached/memcached_controller.go` --><p><strong>注意:</strong></p><ul><li>在将新的 import 路径添加到你的operator 项目中后，如果项目的根目录中存在 <code>vendor/</code> 目录，请运行 <code>go mod vendor</code> 以满足这些依赖。</li><li>需要先添加您的第三方资源，然后才能在 <code>&quot;Setup all Controllers&quot;</code> 中添加控制器。</li></ul><h3 id="在删除的时候做些清理工作"><a href="#在删除的时候做些清理工作" class="headerlink" title="在删除的时候做些清理工作"></a>在删除的时候做些清理工作</h3><p>要实现复杂的删除逻辑，你可以在自定义资源中增加一个 finalizer。这将阻止你的自定义资源被删除，直到你删除 finalizer（例如，在清理逻辑成功运行之后）。有关更多信息，请参考<a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#finalizers" target="_blank" rel="noopener">official Kubernetes documentation on finalizers</a>。</p><p><strong>示例：</strong></p><p>以下是 <code>pkg/controller/memcached/memcached_controller.go</code> 控制器文件的摘录。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> memcachedFinalizer = <span class="string">"finalizer.cache.example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReconcileMemcached)</span> <span class="title">Reconcile</span><span class="params">(request reconcile.Request)</span> <span class="params">(reconcile.Result, error)</span></span> &#123;</span><br><span class="line">reqLogger := log.WithValues(<span class="string">"Request.Namespace"</span>, request.Namespace, <span class="string">"Request.Name"</span>, request.Name)</span><br><span class="line">reqLogger.Info(<span class="string">"Reconciling Memcached"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch the Memcached instance</span></span><br><span class="line">memcached := &amp;cachev1alpha1.Memcached&#123;&#125;</span><br><span class="line">err := r.client.Get(context.TODO(), request.NamespacedName, memcached)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// If the resource is not found, that means all of</span></span><br><span class="line"><span class="comment">// the finalizers have been removed, and the memcached</span></span><br><span class="line"><span class="comment">// resource has been deleted, so there is nothing left</span></span><br><span class="line"><span class="comment">// to do.</span></span><br><span class="line"><span class="keyword">if</span> apierrors.IsNotFound(err) &#123;</span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, fmt.Errorf(<span class="string">"could not fetch memcached instance: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if the Memcached instance is marked to be deleted, which is</span></span><br><span class="line"><span class="comment">// indicated by the deletion timestamp being set.</span></span><br><span class="line">isMemcachedMarkedToBeDeleted := memcached.GetDeletionTimestamp() != <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> isMemcachedMarkedToBeDeleted &#123;</span><br><span class="line"><span class="keyword">if</span> contains(memcached.GetFinalizers(), memcachedFinalizer) &#123;</span><br><span class="line"><span class="comment">// Run finalization logic for memcachedFinalizer. If the</span></span><br><span class="line"><span class="comment">// finalization logic fails, don't remove the finalizer so</span></span><br><span class="line"><span class="comment">// that we can retry during the next reconciliation.</span></span><br><span class="line"><span class="keyword">if</span> err := r.finalizeMemcached(reqLogger, memcached); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove memcachedFinalizer. Once all finalizers have been</span></span><br><span class="line"><span class="comment">// removed, the object will be deleted.</span></span><br><span class="line">memcached.SetFinalizers(remove(memcached.GetFinalizers(), memcachedFinalizer))</span><br><span class="line">err := r.client.Update(context.TODO(), memcached)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add finalizer for this CR</span></span><br><span class="line"><span class="keyword">if</span> !contains(memcached.GetFinalizers(), memcachedFinalizer) &#123;</span><br><span class="line"><span class="keyword">if</span> err := r.addFinalizer(reqLogger, memcached); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> reconcile.Result&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReconcileMemcached)</span> <span class="title">finalizeMemcached</span><span class="params">(reqLogger logr.Logger, m *cachev1alpha1.Memcached)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// TODO(user): Add the cleanup steps that the operator</span></span><br><span class="line"><span class="comment">// needs to do before the CR can be deleted. Examples</span></span><br><span class="line"><span class="comment">// of finalizers include performing backups and deleting</span></span><br><span class="line"><span class="comment">// resources that are not owned by this CR, like a PVC.</span></span><br><span class="line">reqLogger.Info(<span class="string">"Successfully finalized memcached"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *ReconcileMemcached)</span> <span class="title">addFinalizer</span><span class="params">(reqLogger logr.Logger, m *cachev1alpha1.Memcached)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">reqLogger.Info(<span class="string">"Adding Finalizer for the Memcached"</span>)</span><br><span class="line">m.SetFinalizers(<span class="built_in">append</span>(m.GetFinalizers(), memcachedFinalizer))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update CR</span></span><br><span class="line">err := r.client.Update(context.TODO(), m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">reqLogger.Error(err, <span class="string">"Failed to update Memcached with finalizer"</span>)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(list []<span class="keyword">string</span>, s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="keyword">if</span> v == s &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(list []<span class="keyword">string</span>, s <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="keyword">if</span> v == s &#123;</span><br><span class="line">list = <span class="built_in">append</span>(list[:i], list[i+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- ### MetricsTo learn about how metrics work in the Operator SDK read the [metrics section][metrics_doc] of the user documentation. --><h3 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h3><p>要了解 operator SDK 中 metrics 如何工作，请阅读用户文档 <a href="./user/metrics/README.md">metrics section</a>。</p><!-- ## Leader electionDuring the lifecycle of an operator it's possible that there may be more than 1 instance running at any given time e.g when rolling out an upgrade for the operator.In such a scenario it is necessary to avoid contention between multiple operator instances via leader election so that only one leader instance handles the reconciliation while the other instances are inactive but ready to take over when the leader steps down.There are two different leader election implementations to choose from, each with its own tradeoff.- [Leader-for-life][leader_for_life]: The leader pod only gives up leadership (via garbage collection) when it is deleted. This implementation precludes the possibility of 2 instances mistakenly running as leaders (split brain). However, this method can be subject to a delay in electing a new leader. For instance when the leader pod is on an unresponsive or partitioned node, the [`pod-eviction-timeout`][pod_eviction_timeout] dictates how long it takes for the leader pod to be deleted from the node and step down (default 5m).- [Leader-with-lease][leader_with_lease]: The leader pod periodically renews the leader lease and gives up leadership when it can't renew the lease. This implementation allows for a faster transition to a new leader when the existing leader is isolated, but there is a possibility of split brain in [certain situations][lease_split_brain].By default the SDK enables the leader-for-life implementation. However you should consult the docs above for both approaches to consider the tradeoffs that make sense for your use case.The following examples illustrate how to use the two options: --><h2 id="领导人选举"><a href="#领导人选举" class="headerlink" title="领导人选举"></a>领导人选举</h2><p>在 operator 的生命周期内，例如在为 operator 升级时，在任何给定的时间可能有多个实例在运行。<br>在这种情况下，有必要避免通过领导者选举在多个 operator 实例之间发生争用，以便只有一个领导者实例处理调和，而其他实例处于非活动状态，但准备好在领导者下台时接管。</p><p>有两种不同的领导者选举实现方式可供选择，每种实现方式都有其自身的取舍。</p><ul><li><a href="https://godoc.org/github.com/operator-framework/operator-sdk/pkg/leader" target="_blank" rel="noopener">Leader-for-life</a>：领导者 pod 仅在被删除时才放弃领导（通过垃圾回收）。此实现避免了 2 个实例错误地作为领导者运行（脑裂）的可能性。但是，此方法可能会导致选举新领导人的时间延迟。例如，当领导者 pod 在无响应或者在一个分区的节点上时，<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/#options" target="_blank" rel="noopener"><code>pod-eviction-timeout</code></a> 参数指示从节点删除领导者 pod 时间并下台的时间（默认是5m）。</li><li><a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/leaderelection" target="_blank" rel="noopener">Leader-with-lease</a>：领导者 pod 会定期续签领导租约，并在无法续签租约是放弃领导。这种实现方式可以更快的转移领导权，但是在 <a href="https://github.com/kubernetes/client-go/blob/30b06a83d67458700a5378239df6b96948cb9160/tools/leaderelection/leaderelection.go#L21-L24" target="_blank" rel="noopener">certain situations</a> 可以会出现脑裂的情况。</li></ul><p>默认情况下，operator SDK 使用 leader-for-life 的方式。但是，你应该参考上述两种方法的文档，以考虑对你的用例有意义的折衷方案。</p><p>下面的示例说明了如何使用这两个选项：</p><!-- ### Leader for lifeA call to `leader.Become()` will block the operator as it retries until it can become the leader by creating the configmap named `memcached-operator-lock`. --><h3 id="Leader-for-life"><a href="#Leader-for-life" class="headerlink" title="Leader for life"></a>Leader for life</h3><p>通过对 <code>leader.Become()</code> 方法的调用阻止 operator 重新成为领导，直到其创建名为 <code>memcached-operator-lock</code> 的 configmap。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"github.com/operator-framework/operator-sdk/pkg/leader"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  err = leader.Become(context.TODO(), <span class="string">"memcached-operator-lock"</span>)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Error(err, <span class="string">"Failed to retry for leader lock"</span>)</span><br><span class="line">    os.Exit(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- If the operator is not running inside a cluster `leader.Become()` will simply return without error to skip the leader election since it can't detect the operator's namespace. --><p>如果 operator 不在集群中运行，则 <code>leader.Become()</code> 将返回无错误的消息以跳过领导人选举，因为它无法检测 operator 的命名空间。</p><!-- ### Leader with leaseThe leader-with-lease approach can be enabled via the [Manager Options][manager_options] for leader election. --><h3 id="Leader-with-lease"><a href="#Leader-with-lease" class="headerlink" title="Leader with lease"></a>Leader with lease</h3><p>可以通过 <a href="https://godoc.org/github.com/kubernetes-sigs/controller-runtime/pkg/manager#Options" target="_blank" rel="noopener">Manager Options</a> 启用领导者租用方式进行领导人选举。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">"sigs.k8s.io/controller-runtime/pkg/manager"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  opts := manager.Options&#123;</span><br><span class="line">    ...</span><br><span class="line">    LeaderElection: <span class="literal">true</span>,</span><br><span class="line">    LeaderElectionID: <span class="string">"memcached-operator-lock"</span></span><br><span class="line">  &#125;</span><br><span class="line">  mgr, err := manager.New(cfg, opts)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- When the operator is not running in a cluster, the Manager will return an error on starting since it can't detect the operator's namespace in order to create the configmap for leader election. You can override this namespace by setting the Manager's `LeaderElectionNamespace` option. --><p>当 operator 不在集群中运行时，Manager 将在启动时返回错误，因为它无法检测到 operator 的名称空间以创建用于领导者选举的 configmap。 您可以通过设置 Manager 的 <code>LeaderElectionNamespace</code> 选项来覆盖此命名空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Operator-SDK-用户指南-v0-12（翻译）&quot;&gt;&lt;a href=&quot;#Operator-SDK-用户指南-v0-12（翻译）&quot; class=&quot;headerlink&quot; title=&quot;Operator SDK 用户指南 v0.12（翻译）&quot;&gt;&lt;/a&gt;Opera
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
      <category term="operator" scheme="https://luolizhi.github.io/tags/operator/"/>
    
  </entry>
  
  <entry>
    <title>API-gateway</title>
    <link href="https://luolizhi.github.io/2019/08/27/API-gateway/"/>
    <id>https://luolizhi.github.io/2019/08/27/API-gateway/</id>
    <published>2019-08-27T01:25:34.000Z</published>
    <updated>2019-11-30T04:09:21.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开源API网关比较"><a href="#开源API网关比较" class="headerlink" title="开源API网关比较"></a>开源API网关比较</h2><table><thead><tr><th>开源网关</th><th>简介</th></tr></thead><tbody><tr><td>zuul</td><td>Netflix 开源，基于 JVM 路由和服务端的负载均衡器。（已经停止维护）</td></tr><tr><td>kong</td><td>基于 OpenResty（Nginx + Lua 模块）编写的高可用、易扩展的，由 Mashape 公司开源的 API Gateway 项目 。</td></tr><tr><td>spring cloud gateway</td><td>Spring Cloud 团队的一个全新项目，基于 Spring 5.0、SpringBoot2.0、Project Reactor 等技术开发的网关， 目标是替代 Netflix Zuul 。</td></tr><tr><td>Traefik</td><td>一个现代 HTTP 反向代理和负载均衡器，可以轻松部署微服务，Traeffik 可以与您现有的组件（Docker、Swarm，Kubernetes，Marathon，Consul，Etcd，…）集成，并自动动态配置。</td></tr></tbody></table><p>从开源社区活跃度来看，无疑是Kong和Traefik较好；<br>从成熟度来看，较好的是Kong、Traefik；<br>从性能角度来看，Kong要比其他几个领先一些；<br>从架构优势的扩展性来看，Kong有丰富的插件，Ambassador也有插件但不多，而Zuul是完全需要自研，但Zuul由于与Spring Cloud深度集成，使用度也很高。</p><h2 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h2><p><a href="https://zhaohuabing.com/post/2019-03-29-how-to-choose-ingress-for-service-mesh/" target="_blank" rel="noopener">选型参考,原理讲解</a></p><p>API 网关出现的原因是微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><blockquote><ul><li>客户端会多次请求不同的微服务，增加了客户端的复杂性。</li><li>存在跨域请求，在一定场景下处理相对复杂。</li><li>认证复杂，每个服务都需要独立认证。</li><li>难以重构，随着项目的迭代，可能需要重新划分微服务。例如，可能将多个服务合并成一个或者将一个服务拆分成多个。如果客户端直接与微服务通信，那么重构将会很难实施。</li><li>某些微服务可能使用了防火墙 / 浏览器不友好的协议，直接访问会有一定的困难。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开源API网关比较&quot;&gt;&lt;a href=&quot;#开源API网关比较&quot; class=&quot;headerlink&quot; title=&quot;开源API网关比较&quot;&gt;&lt;/a&gt;开源API网关比较&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;开源网关&lt;/th&gt;
&lt;th&gt;简介&lt;/th
      
    
    </summary>
    
    
      <category term="gateway" scheme="https://luolizhi.github.io/tags/gateway/"/>
    
      <category term="微服务" scheme="https://luolizhi.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>helm 安装 logstash 同步mysql数据到elasticsearch</title>
    <link href="https://luolizhi.github.io/2019/08/25/helm%20%E5%AE%89%E8%A3%85%20logstash/"/>
    <id>https://luolizhi.github.io/2019/08/25/helm 安装 logstash/</id>
    <published>2019-08-25T05:25:34.000Z</published>
    <updated>2019-11-30T04:00:18.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>helm安装到kubernetes集群<br>参考地址：<a href="https://github.com/helm/charts/tree/master/stable/logstash" target="_blank" rel="noopener">https://github.com/helm/charts/tree/master/stable/logstash</a></p><h2 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h2><h3 id="logstash-input-jdbc"><a href="#logstash-input-jdbc" class="headerlink" title="logstash-input-jdbc"></a>logstash-input-jdbc</h3><p>使用 logstash-input-jdbc 插件读取 mysql 的数据，这个插件的工作原理比较简单，就是定时执行一个 sql，然后将 sql 执行的结果写入到流中，增量获取的方式没有通过 binlog 方式同步，而是用一个递增字段作为条件去查询，每次都记录当前查询的位置，由于递增的特性，只需要查询比当前大的记录即可获取这段时间内的全部增量，一般的递增字段有两种，AUTO_INCREMENT 的主键 id 和 ON UPDATE CURRENT_TIMESTAMP 的 update_time 字段，id 字段只适用于那种只有插入没有更新的表，update_time 更加通用一些，建议在 mysql 表设计的时候都增加一个 update_time 字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">jdbc</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">"../mysql-connector-java-5.1.38.jar"</span></span><br><span class="line">    <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">    <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">"jdbc:mysql://&lt;mysql_host&gt;:3306/woa"</span></span><br><span class="line">    <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">"&lt;username&gt;"</span></span><br><span class="line">    <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">"&lt;password&gt;"</span></span><br><span class="line">    <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">"* * * * *"</span></span><br><span class="line">    <span class="string">statement</span> <span class="string">=&gt;</span> <span class="string">"SELECT * FROM table WHERE update_time &gt;= :sql_last_value"</span></span><br><span class="line">    <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">tracking_column_type</span> <span class="string">=&gt;</span> <span class="string">"timestamp"</span></span><br><span class="line">    <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">"update_time"</span></span><br><span class="line">    <span class="string">last_run_metadata_path</span> <span class="string">=&gt;</span> <span class="string">"syncpoint_table"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>jdbc_driver_library: jdbc mysql 驱动的路径</li><li>jdbc_driver_class: 驱动类的名字，mysql 填 com.mysql.jdbc.Driver 就好了</li><li>jdbc_connection_string: mysql 地址</li><li>jdbc_user: mysql 用户</li><li>jdbc_password: mysql 密码</li><li>schedule: 执行 sql 时机，类似 crontab 的调度</li><li>statement: 要执行的 sql，以 “:” 开头是定义的变量，可以通过 parameters 来设置变量，这里的 sql_last_value 是内置的变量，表示上一次 sql 执行中 update_time 的值，这里 - update_time 条件是 &gt;= 因为时间有可能相等，没有等号可能会漏掉一些增量</li><li>use_column_value: 使用递增列的值</li><li>tracking_column_type: 递增字段的类型，numeric 表示数值类型, timestamp 表示时间戳类型</li><li>tracking_column: 递增字段的名称，这里使用 update_time 这一列，这列的类型是 timestamp</li><li>last_run_metadata_path: 同步点文件，这个文件记录了上次的同步点，重启时会读取这个文件，这个文件可以手动修改</li></ul><h3 id="logstash-output-elasticsearch"><a href="#logstash-output-elasticsearch" class="headerlink" title="logstash-output-elasticsearch"></a>logstash-output-elasticsearch</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["127.0.0.1"]</span></span><br><span class="line">    <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">"&lt;user&gt;"</span></span><br><span class="line">    <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">"&lt;password&gt;"</span></span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"table"</span></span><br><span class="line">    <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;id&#125;</span>"</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>hosts: es 集群地址</li><li>user: es 用户名</li><li>password: es 密码</li><li>index: 导入到 es 中的 index 名，这里我直接设置成了 mysql 表的名字</li><li>document_id: 导入到 es 中的文档 id，这个需要设置成主键，否则同一条记录更新后在 es 中会出现两条记录，%{id} 表示引用 mysql 表中 id 字段的值</li></ul><h2 id="定制jdbc镜像"><a href="#定制jdbc镜像" class="headerlink" title="定制jdbc镜像"></a>定制jdbc镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> docker.elastic.co/logstash/logstash-oss:<span class="number">7.1</span>.<span class="number">1</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> logstash-plugin install logstash-input-jdbc</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> mysql-connector-java-5.1.38.jar /usr/share/logstash/mysql-connector-java-5.1.38.jar</span></span><br></pre></td></tr></table></figure><p>镜像docker.elastic.co/logstash/logstash-oss:7.1.1的工作目录为/usr/share/logstash/</p><p>所以其他配置可以以此为当前目录配置相对路径。</p><h2 id="自定义value值"><a href="#自定义value值" class="headerlink" title="自定义value值"></a>自定义value值</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Custom files that can be referenced by plugins.</span></span><br><span class="line"><span class="comment">## Each YAML heredoc will become located in the logstash home directory under</span></span><br><span class="line"><span class="comment">## the files subdirectory.</span></span><br><span class="line"><span class="comment">## 默认会在/usr/share/logstash/files/目录下生成单独的文件，供后面output自定义template使用,可以定义多个template文件。文件格式请严格参考another-template.json,特别是properties字段。</span></span><br><span class="line"><span class="attr">files:</span></span><br><span class="line">  <span class="comment"># logstash-template.json: |-</span></span><br><span class="line">  <span class="comment">#   &#123;</span></span><br><span class="line">  <span class="comment">#     "order": 0,</span></span><br><span class="line">  <span class="comment">#     "version": 1,</span></span><br><span class="line">  <span class="comment">#     "index_patterns": [</span></span><br><span class="line">  <span class="comment">#       "logstash-*"</span></span><br><span class="line">  <span class="comment">#     ],</span></span><br><span class="line">  <span class="comment">#     "settings": &#123;</span></span><br><span class="line">  <span class="comment">#       "index": &#123;</span></span><br><span class="line">  <span class="comment">#         "refresh_interval": "5s"</span></span><br><span class="line">  <span class="comment">#       &#125;</span></span><br><span class="line">  <span class="comment">#     &#125;,</span></span><br><span class="line">  <span class="comment">#     "mappings": &#123;</span></span><br><span class="line">  <span class="comment">#       "doc": &#123;</span></span><br><span class="line">  <span class="comment">#         "_meta": &#123;</span></span><br><span class="line">  <span class="comment">#           "version": "1.0.0"</span></span><br><span class="line">  <span class="comment">#         &#125;,</span></span><br><span class="line">  <span class="comment">#         "enabled": false</span></span><br><span class="line">  <span class="comment">#       &#125;</span></span><br><span class="line">  <span class="comment">#     &#125;,</span></span><br><span class="line">  <span class="comment">#     "aliases": &#123;&#125;</span></span><br><span class="line">  <span class="comment">#   &#125;</span></span><br><span class="line">  <span class="comment">#  another-template.json: |-</span></span><br><span class="line">  <span class="comment">#   &#123;</span></span><br><span class="line">  <span class="comment">#     "order": 0,</span></span><br><span class="line">  <span class="comment">#     "version": 1,</span></span><br><span class="line">  <span class="comment">#     "index_patterns": [</span></span><br><span class="line">  <span class="comment">#       "test*"</span></span><br><span class="line">  <span class="comment">#     ],</span></span><br><span class="line">  <span class="comment">#     "settings": &#123;</span></span><br><span class="line">  <span class="comment">#       "index": &#123;</span></span><br><span class="line">  <span class="comment">#         "refresh_interval": "5s"</span></span><br><span class="line">  <span class="comment">#       &#125;</span></span><br><span class="line">  <span class="comment">#     &#125;,</span></span><br><span class="line">  <span class="comment">#     "mappings": &#123;</span></span><br><span class="line">  <span class="comment">#       "_doc": &#123;</span></span><br><span class="line">  <span class="comment">#         "_source": &#123;</span></span><br><span class="line">  <span class="comment">#           "enabled": false</span></span><br><span class="line">  <span class="comment">#         &#125;,</span></span><br><span class="line">  <span class="comment">#         "properties": &#123;</span></span><br><span class="line">  <span class="comment">#           "host_name": &#123;</span></span><br><span class="line">  <span class="comment">#             "type": "keyword"</span></span><br><span class="line">  <span class="comment">#           &#125;,</span></span><br><span class="line">  <span class="comment">#           "created_at": &#123;</span></span><br><span class="line">  <span class="comment">#             "type": "date",</span></span><br><span class="line">  <span class="comment">#             "format": "EEE MMM dd HH:mm:ss Z yyyy"</span></span><br><span class="line">  <span class="comment">#           &#125;</span></span><br><span class="line">  <span class="comment">#         &#125;</span></span><br><span class="line">  <span class="comment">#       &#125;</span></span><br><span class="line">  <span class="comment">#     &#125;,</span></span><br><span class="line">  <span class="comment">#     "aliases": &#123;&#125;</span></span><br><span class="line">  <span class="comment">#   &#125;  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## <span class="doctag">NOTE:</span> To achieve multiple pipelines with this chart, current best practice</span></span><br><span class="line"><span class="comment">## is to maintain one pipeline per chart release. In this way configuration is</span></span><br><span class="line"><span class="comment">## simplified and pipelines are more isolated from one another.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">inputs:</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">input</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="string">jdbc</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">"jdbc:mysql://&lt;host&gt;:3306/&lt;database&gt;"</span></span><br><span class="line">        <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">"&lt;user_name&gt;"</span></span><br><span class="line">        <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">"&lt;password&gt;"</span></span><br><span class="line">        <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">"/usr/share/logstash/mysql-connector-java-5.1.38.jar"</span> <span class="comment">#全路径</span></span><br><span class="line">        <span class="comment"># jdbc_driver_library =&gt; "./mysql-connector-java-5.1.38.jar" # 也可以使用相对路径，默认路径为/usr/share/logstash/</span></span><br><span class="line">        <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">        <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">"true"</span></span><br><span class="line">        <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">"* * * * *"</span></span><br><span class="line">        <span class="string">statement</span> <span class="string">=&gt;</span> <span class="string">"SELECT  * from user"</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">"helloworld"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="comment"># udp &#123;</span></span><br><span class="line">      <span class="comment">#   port =&gt; 1514</span></span><br><span class="line">      <span class="comment">#   type =&gt; syslog</span></span><br><span class="line">      <span class="comment"># &#125;</span></span><br><span class="line">      <span class="comment"># tcp &#123;</span></span><br><span class="line">      <span class="comment">#   port =&gt; 1514</span></span><br><span class="line">      <span class="comment">#   type =&gt; syslog</span></span><br><span class="line">      <span class="comment"># &#125;</span></span><br><span class="line">      <span class="string">beats</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="comment"># http &#123;</span></span><br><span class="line">      <span class="comment">#   port =&gt; 8080</span></span><br><span class="line">      <span class="comment"># &#125;</span></span><br><span class="line">      <span class="comment"># kafka &#123;</span></span><br><span class="line">      <span class="comment">#   ## ref: https://www.elastic.co/guide/en/logstash/current/plugins-inputs-kafka.html</span></span><br><span class="line">      <span class="comment">#   bootstrap_servers =&gt; "kafka-input:9092"</span></span><br><span class="line">      <span class="comment">#   codec =&gt; json &#123; charset =&gt; "UTF-8" &#125;</span></span><br><span class="line">      <span class="comment">#   consumer_threads =&gt; 1</span></span><br><span class="line">      <span class="comment">#   topics =&gt; ["source"]</span></span><br><span class="line">      <span class="comment">#   type =&gt; "example"</span></span><br><span class="line">      <span class="comment"># &#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="comment"># main: |-</span></span><br><span class="line">  <span class="comment">#   filter &#123;</span></span><br><span class="line">  <span class="comment">#   &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">outputs:</span></span><br><span class="line">  <span class="attr">main:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">output</span> <span class="string">&#123;</span></span><br><span class="line">      <span class="comment"># stdout &#123; codec =&gt; rubydebug &#125;</span></span><br><span class="line">      <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["$&#123;ELASTICSEARCH_HOST&#125;:$&#123;ELASTICSEARCH_PORT&#125;"]</span></span><br><span class="line">        <span class="string">manage_template</span> <span class="string">=&gt;</span> <span class="literal">false</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"<span class="template-variable">%&#123;[@metadata][beat]&#125;</span>-<span class="template-variable">%&#123;+YYYY.MM.dd&#125;</span>"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">      <span class="comment"># kafka &#123;</span></span><br><span class="line">      <span class="comment">#   ## ref: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-kafka.html</span></span><br><span class="line">      <span class="comment">#   bootstrap_servers =&gt; "kafka-output:9092"</span></span><br><span class="line">      <span class="comment">#   codec =&gt; json &#123; charset =&gt; "UTF-8" &#125;</span></span><br><span class="line">      <span class="comment">#   compression_type =&gt; "lz4"</span></span><br><span class="line">      <span class="comment">#   topic_id =&gt; "destination"</span></span><br><span class="line">      <span class="comment"># &#125;</span></span><br><span class="line">      <span class="string">elasticsearch</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> <span class="string">["$&#123;ELASTICSEARCH_HOST&#125;:$&#123;ELASTICSEARCH_PORT&#125;"]</span></span><br><span class="line">        <span class="comment"># index名</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">"hello"</span></span><br><span class="line">        <span class="comment"># 需要关联的数据库中有有一个id字段，对应索引的id号</span></span><br><span class="line">        <span class="string">manage_template</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">        <span class="string">template</span> <span class="string">=&gt;"/usr/share/logstash/files/logstash-template.json"</span>  <span class="comment">#也可以使用相对路径"./files/logstash-template.json"</span></span><br><span class="line">        <span class="string">template_overwrite</span> <span class="string">=&gt;true</span></span><br><span class="line">        <span class="string">template_name</span> <span class="string">=&gt;</span> <span class="string">"helloword"</span></span><br><span class="line">      <span class="string">&#125;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;helm安装到kubernetes集群&lt;br&gt;参考地址：&lt;a href=&quot;https://github.com/helm/charts/tr
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
      <category term="logstash" scheme="https://luolizhi.github.io/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>kubesphere</title>
    <link href="https://luolizhi.github.io/2019/08/23/kubesphere/"/>
    <id>https://luolizhi.github.io/2019/08/23/kubesphere/</id>
    <published>2019-08-23T02:20:27.000Z</published>
    <updated>2019-11-29T11:45:41.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KubeSphere-安装-all-in-one"><a href="#KubeSphere-安装-all-in-one" class="headerlink" title="KubeSphere 安装(all-in-one)"></a>KubeSphere 安装(all-in-one)</h2><p>KubeSphere 帮助企业在云、虚拟化及物理机等任何环境中快速构建、部署及运维容器架构，轻松实现服务治理、 DevOps 与 CI/CD 、应用管理、大数据、人工智能、IAM 以及监控日志等业务场景。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><a href="https://kubesphere.io/docs/advanced-v2.0/zh-CN/installation/all-in-one" target="_blank" rel="noopener">安装参考</a></p><ul><li>centos7.6 8核16G，100G系统盘</li></ul><h3 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h3><p>在线版（2.0.2）<br><code>curl -L https://kubesphere.io/download/stable/advanced-2.0.2 &gt; advanced-2.0.2.tar.gz &amp;&amp; tar -zxf advanced-2.0.2.tar.gz &amp;&amp; cd kubesphere-all-advanced-2.0.2/scripts</code></p><h3 id="安装-KubeSphere"><a href="#安装-KubeSphere" class="headerlink" title="安装 KubeSphere"></a>安装 KubeSphere</h3><ol><li>建议使用 root 用户安装，执行 install.sh 脚本：</li></ol><p><code>$ ./install.sh</code></p><ol start="2"><li>输入数字 1 选择第一种即 all-in-one 模式开始安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################################</span></span><br><span class="line">         KubeSphere Installer Menu</span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line">*   1) All-in-one</span><br><span class="line">*   2) Multi-node</span><br><span class="line">*   3) Quit</span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line">https://kubesphere.io/               2018-07-08</span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line">Please input an option: 1</span><br></pre></td></tr></table></figure><ol start="3"><li>测试 KubeSphere 单节点安装是否成功：</li></ol><p>(1) 待安装脚本执行完后，当看到如下 “Successful” 界面，则说明 KubeSphere 安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">successsful!</span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment">###              Welcome to KubeSphere!           ###</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"></span><br><span class="line">Console: http://192.168.0.8:30880</span><br><span class="line">Account: admin</span><br><span class="line">Password: P@88w0rd</span><br><span class="line"></span><br><span class="line">NOTE：Please modify the default password after login.</span><br><span class="line"><span class="comment">#####################################################</span></span><br></pre></td></tr></table></figure><h2 id="kubesphere-安装（在现有k8s集群上）"><a href="#kubesphere-安装（在现有k8s集群上）" class="headerlink" title="kubesphere 安装（在现有k8s集群上）"></a>kubesphere 安装（在现有k8s集群上）</h2><p>安装脚本地址：<a href="https://github.com/kubesphere/ks-installer" target="_blank" rel="noopener">https://github.com/kubesphere/ks-installer</a></p><p>一直有helm报错未能成功安装。</p><h2 id="安装过程的问题"><a href="#安装过程的问题" class="headerlink" title="安装过程的问题"></a>安装过程的问题</h2><ul><li>openldap 这个组件启动报错，因为 ks-account 组件又是依赖 openldap 这个组件的，所以同样启动报错，在安装过程中 openldap 出现了类似如下错误信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm: cannot remove ‘/container/service/slapd/assets/config/bootstrap/ldif/<span class="built_in">readonly</span>-user’: Directory not empty </span><br><span class="line">rm: cannot remove ‘/container/service/slapd/assets/config/bootstrap/schema/mmc’: Directory not empty </span><br><span class="line">rm: cannot remove ‘/container/service/slapd/assets/config/replication’: Directory not empty </span><br><span class="line">rm: cannot remove ‘/container/service/slapd/assets/config/tls’: Directory not empty *** /container/run/startup/slapd </span><br><span class="line"></span><br><span class="line">failed with status 1</span><br></pre></td></tr></table></figure><p>解决方法： 修改kubesphere/roles/prepare/base/templates/ks-account-init.yaml.j2文件，在 openldap 这个 Deployment 下面容器中添加启动参数–copy-service</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim kubesphere/roles/prepare/base/templates/ks-account-init.yaml.j2 +122</span></span><br><span class="line"></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - env:</span><br><span class="line">        - name: LDAP_ORGANISATION</span><br><span class="line">          value: kubesphere</span><br><span class="line">        - name: LDAP_DOMAIN</span><br><span class="line">          value: kubesphere.io</span><br><span class="line">        - name: LDAP_ADMIN_PASSWORD</span><br><span class="line">          value: admin</span><br><span class="line">        image: &#123;&#123; openldap_repo &#125;&#125;:&#123;&#123; openldap_tag &#125;&#125;</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        args:    <span class="comment"># 添加该启动参数</span></span><br><span class="line">        - --copy-service</span><br><span class="line">        name: openldap</span><br></pre></td></tr></table></figure><ul><li>sonarqube安装报错</li></ul><p>解决方法：不安装sonarqube，修改conf/vars.yml文件，将true改为false</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim conf/vars.yml +210</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## sonarqube</span></span><br><span class="line">sonarqube_enable: <span class="literal">false</span> <span class="comment">#改为false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;KubeSphere-安装-all-in-one&quot;&gt;&lt;a href=&quot;#KubeSphere-安装-all-in-one&quot; class=&quot;headerlink&quot; title=&quot;KubeSphere 安装(all-in-one)&quot;&gt;&lt;/a&gt;KubeSphere 安装
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
      <category term="kubesphere" scheme="https://luolizhi.github.io/tags/kubesphere/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 单机 docker 集群</title>
    <link href="https://luolizhi.github.io/2019/08/15/elasticsearch%20%E5%8D%95%E6%9C%BA%20docker%20%E9%9B%86%E7%BE%A4/"/>
    <id>https://luolizhi.github.io/2019/08/15/elasticsearch 单机 docker 集群/</id>
    <published>2019-08-15T01:19:04.000Z</published>
    <updated>2019-11-30T04:10:35.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单机docker启动-elasticsearch-集群"><a href="#单机docker启动-elasticsearch-集群" class="headerlink" title="单机docker启动 elasticsearch 集群"></a>单机docker启动 elasticsearch 集群</h2><blockquote><p>安装版本 elasticsearch 6.7 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.7/docker.html" target="_blank" rel="noopener">参考网址</a>, kibana 6.7 <a href="https://www.elastic.co/guide/en/kibana/6.7/docker.html" target="_blank" rel="noopener">参考网址</a></p></blockquote><blockquote><p>注意镜像名称是elasticsearch-oss:6.7.0，这个-oss表示不包括X-Pack的ES镜像，这也是在6.0+版本后划分的，剩下两种类型是basic(默认)和platinum，具体官方说明可以看下图。</p></blockquote><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p><code>docker run -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; docker.elastic.co/elasticsearch/elasticsearch:6.7.2</code></p><h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><p>The vm.max_map_count setting should be set permanently in /etc/sysctl.conf:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ grep vm.max_map_count /etc/sysctl.conf</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"><span class="comment">#为空需要修改</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"vm.max_map_count=262144"</span> &gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><ul><li><p>启动<br><code>docker-compose up</code></p></li><li><p>停止<br><code>docker-compose down -v</code></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker-compose.yaml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:6.7.2</span> <span class="comment">#可以换成私有镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata1:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">  <span class="attr">elasticsearch2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:6.7.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch2</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=docker-cluster</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"discovery.zen.ping.unicast.hosts=elasticsearch"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata2:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">esdata1:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">esdata2:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">esnet:</span></span><br></pre></td></tr></table></figure><h3 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:9200/_cat/health</span><br><span class="line">1472225929 15:38:49 docker-cluster green 2 2 4 2 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure><h2 id="插件支持"><a href="#插件支持" class="headerlink" title="插件支持"></a>插件支持</h2><h3 id="ik-analysis"><a href="#ik-analysis" class="headerlink" title="ik analysis"></a>ik analysis</h3><p>IK是国内用得比较多的中文分词器，与ES安装集成也比较简单，首先进入dockerdocker exec -it elasticsearch bash，然后用命令./bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.2/elasticsearch-analysis-ik-6.3.2.zip安装即可(需对应es版本)，安装完使用docker" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.3.2/elasticsearch-analysis-ik-6.3.2.zip安装即可(需对应es版本)，安装完使用docker</a> restart elasticsearch重启服务即可。IK支持两种分词方式，ik_smart和ik_max_word，前者分词粒度没有后者细，可以针对实际情况进行选择。</p><h3 id="head-plugin"><a href="#head-plugin" class="headerlink" title="head plugin"></a>head plugin</h3><p>elasticsearch-head插件也是测试的时候用得比较多的插件，以前用ES2的时候是借助plugin脚本安装的，但这种方式在ES5.0之后被废弃了，然后作者也推荐了好几种方式，可以借助npm运行该服务，或者用docker运行服务，不过为了简单起见我最后选的是<a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/" target="_blank" rel="noopener">Chrome extension</a>这种方式。</p><h2 id="kibana-安装"><a href="#kibana-安装" class="headerlink" title="kibana 安装"></a>kibana 安装</h2><ul><li><p>启动<br><code>docker-compose up</code></p></li><li><p>停止<br><code>docker-compose down -v</code></p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker-compose.yaml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:6.7.2</span>  <span class="comment">#修改为自定义镜像</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVER_NAME:</span> <span class="string">kibana.example.org</span>   <span class="comment">#kibana server.name的值</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://elasticsearch.example.org</span>  <span class="comment">#修改为es集群的地址</span></span><br></pre></td></tr></table></figure><h2 id="单个docker-compose-yaml"><a href="#单个docker-compose-yaml" class="headerlink" title="单个docker-compose.yaml"></a>单个docker-compose.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.cty.com/library/elasticsearch-oss-ik-config:6.7.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=node1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata1:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">  <span class="attr">elasticsearch2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.cty.com/library/elasticsearch-oss-ik-config:6.7.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch2</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=node2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"discovery.zen.ping.unicast.hosts=elasticsearch"</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esdata2:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">esnet</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">harbor.cty.com/library/kibana-oss:6.7.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"SERVER_NAME=kibana"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ELASTICSEARCH_HOSTS=http://192.168.1.150:9200"</span>  <span class="comment">#ip地址不能换</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"5601:5601"</span>  </span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch2</span></span><br><span class="line"><span class="attr">volumes:</span>     <span class="comment">#路径默认在/var/lib/docker/volumes/</span></span><br><span class="line">  <span class="attr">esdata1:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">esdata2:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">esnet:</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;单机docker启动-elasticsearch-集群&quot;&gt;&lt;a href=&quot;#单机docker启动-elasticsearch-集群&quot; class=&quot;headerlink&quot; title=&quot;单机docker启动 elasticsearch 集群&quot;&gt;&lt;/a&gt;单机doc
      
    
    </summary>
    
    
      <category term="docker" scheme="https://luolizhi.github.io/tags/docker/"/>
    
      <category term="elasticsearch" scheme="https://luolizhi.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile 中 cmd 和 entrypoint 用法</title>
    <link href="https://luolizhi.github.io/2019/08/11/Dockerfile%E4%B8%ADcmd%E5%92%8Centrypoint/"/>
    <id>https://luolizhi.github.io/2019/08/11/Dockerfile中cmd和entrypoint/</id>
    <published>2019-08-11T01:19:04.000Z</published>
    <updated>2019-11-30T03:56:57.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="entrypoint-cmd"><a href="#entrypoint-cmd" class="headerlink" title="entrypoint cmd"></a>entrypoint cmd</h2><p>在docker run image cmd arg1时，总是相当于CMD的[“cmd”, “arg1”]形式。 此外，docker-compose.yml的情况与docker run类似。</p><h3 id="Dockerfile中cmd命令的三种形式"><a href="#Dockerfile中cmd命令的三种形式" class="headerlink" title="Dockerfile中cmd命令的三种形式"></a>Dockerfile中cmd命令的三种形式</h3><p>The CMD instruction has three forms:</p><ul><li>CMD [“executable”,”param1”,”param2”] (exec form, this is the preferred form)</li><li>CMD [“param1”,”param2”] (as default parameters to ENTRYPOINT)</li><li>CMD command param1 param2 (shell form)</li></ul><p>第一种(推荐)<br>采用中括号形式，那么第一个参数必须是命令的全路径才行。而且，一个dockerfile至多只能有一个cmd，如果有多个，只有最后一个生效。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo 'hello cmd!'"</span>]</span></span><br></pre></td></tr></table></figure><p>第二种是作为参数传递给entrypoint<br>第三种shell form，即没有中括号的形式。那么命令command默认是在”/bin/sh -c”下执行的。(等价于第一种的写法)</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"hello cmd!"</span></span></span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT-has-two-forms"><a href="#ENTRYPOINT-has-two-forms" class="headerlink" title="ENTRYPOINT has two forms:"></a>ENTRYPOINT has two forms:</h3><ul><li>ENTRYPOINT [“executable”, “param1”, “param2”] (exec form, preferred)</li><li>ENTRYPOINT command param1 param2 (shell form)</li></ul><p>分为命令行和shell两种。<br>先看命令行模式，也就是带中括号的。和cmd的中括号形式是一致的，但是这里貌似是在shell的环境下执行的，与cmd有区别。如果run命令后面有东西，那么后面的全部都会作为entrypoint的参数。如果docker run后面没有额外的东西，但是cmd有，那么cmd的全部内容会作为entrypoint的参数，这同时是cmd的第二种用法。这也是网上说的entrypoint不会被覆盖。当然如果要在run里面覆盖，也是有办法的，使用–entrypoint即可。</p><h3 id="docker-compose-Dockerfile-Kubernetes中CMD和entrypoint区别"><a href="#docker-compose-Dockerfile-Kubernetes中CMD和entrypoint区别" class="headerlink" title="docker-compose Dockerfile Kubernetes中CMD和entrypoint区别"></a>docker-compose Dockerfile Kubernetes中CMD和entrypoint区别</h3><table><thead><tr><th>Description</th><th>Docker field name</th><th>Docker-compose</th><th>Kubernetes field name</th></tr></thead><tbody><tr><td>The command run by the container</td><td>Entrypoint</td><td>Entrypoint</td><td>command</td></tr><tr><td>The arguments passed to the command</td><td>Cmd</td><td>command</td><td>args</td></tr></tbody></table><p>如果要覆盖默认的Entrypoint 与 Cmd，需要遵循如下规则：(Docker 与 Kubernetes, k8s中的设置会覆盖容器默认的命令)</p><ul><li><p>如果在容器配置中没有设置command 或者 args，那么将使用Docker镜像自带的命令及其入参。</p></li><li><p>如果在容器配置中只设置了command但是没有设置args,那么容器启动时只会执行该命令，Docker镜像中自带的命令及其入参会被忽略。</p></li><li><p>如果在容器配置中只设置了args,那么Docker镜像中自带的命令会使用该新入参作为其执行时的入参。</p></li><li><p>如果在容器配置中同时设置了command 与 args，那么Docker镜像中自带的命令及其入参会被忽略。容器启动时只会执行配置中设置的命令，并使用配置中设置的入参作为命令的入参。</p></li></ul><p>下表涵盖了各类设置场景：</p><table><thead><tr><th>Image Entrypoint</th><th>Image Cmd</th><th>Container command</th><th>Container args</th><th>Command run</th></tr></thead><tbody><tr><td>[/ep-1]</td><td>[foo bar]</td><td><not set></not></td><td><not set></not></td><td>[ep-1 foo bar]</td></tr><tr><td>[/ep-1]</td><td>[foo bar]</td><td>[/ep-2]</td><td><not set></not></td><td>[ep-2]</td></tr><tr><td>[/ep-1]</td><td>[foo bar]</td><td><not set></not></td><td>[zoo boo]</td><td>[ep-1 zoo boo]</td></tr><tr><td>[/ep-1]</td><td>[foo bar]</td><td>[/ep-2]</td><td>[zoo boo]</td><td>[ep-2 zoo boo]</td></tr></tbody></table><p><em>空白表示没设置该参数</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MESSAGE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">"hello world"</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">["/bin/echo"]</span></span><br><span class="line"><span class="attr">args:</span> <span class="string">["$(MESSAGE)"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;entrypoint-cmd&quot;&gt;&lt;a href=&quot;#entrypoint-cmd&quot; class=&quot;headerlink&quot; title=&quot;entrypoint cmd&quot;&gt;&lt;/a&gt;entrypoint cmd&lt;/h2&gt;&lt;p&gt;在docker run image cmd 
      
    
    </summary>
    
    
      <category term="dockerfile" scheme="https://luolizhi.github.io/tags/dockerfile/"/>
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>cat安装使用</title>
    <link href="https://luolizhi.github.io/2019/08/07/cat%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>https://luolizhi.github.io/2019/08/07/cat安装使用/</id>
    <published>2019-08-07T05:29:38.000Z</published>
    <updated>2019-11-29T11:45:41.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cat-安装步骤"><a href="#cat-安装步骤" class="headerlink" title="cat 安装步骤"></a>cat 安装步骤</h2><h3 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h3><p>官方地址：<a href="https://github.com/dianping/cat/wiki/readme_server" target="_blank" rel="noopener">https://github.com/dianping/cat/wiki/readme_server</a></p><h3 id="客户端集成"><a href="#客户端集成" class="headerlink" title="客户端集成"></a>客户端集成</h3><p>官方地址：<a href="https://github.com/dianping/cat/wiki/readme_client" target="_blank" rel="noopener">https://github.com/dianping/cat/wiki/readme_client</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cat-安装步骤&quot;&gt;&lt;a href=&quot;#cat-安装步骤&quot; class=&quot;headerlink&quot; title=&quot;cat 安装步骤&quot;&gt;&lt;/a&gt;cat 安装步骤&lt;/h2&gt;&lt;h3 id=&quot;服务端部署&quot;&gt;&lt;a href=&quot;#服务端部署&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://luolizhi.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="cat" scheme="https://luolizhi.github.io/tags/cat/"/>
    
  </entry>
  
  <entry>
    <title>gogland查看kubernetes源码</title>
    <link href="https://luolizhi.github.io/2019/08/05/%E9%85%8D%E7%BD%AEgoLand%E6%9F%A5%E7%9C%8Bk8s%E6%BA%90%E7%A0%81/"/>
    <id>https://luolizhi.github.io/2019/08/05/配置goLand查看k8s源码/</id>
    <published>2019-08-05T01:15:02.000Z</published>
    <updated>2019-11-30T04:12:27.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gogland配置读取kubernetes代码"><a href="#gogland配置读取kubernetes代码" class="headerlink" title="gogland配置读取kubernetes代码"></a>gogland配置读取kubernetes代码</h1><ol><li>先下载kubernetes代码</li><li>下载代码并解压出来并按照src\k8s.io\kubernetes新建目录，最后一级为下载的源码目录。</li><li>接下来利用goland打开代码，到src一级。</li><li>设置projectpath；添加下面三行<br>C:\Users\lukey\Documents\code\go\k8s\src\k8s.io\kubernetes\vendor<br>C:\Users\lukey\Documents\code\go\k8s\<br>C:\Users\lukey\Documents\code\go\k8s\src\k8s.io\kubernetes\staging\src</li><li>过一会，代码中的import就由红色变成绿色，就可以直接ctrl+点击到声明了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gogland配置读取kubernetes代码&quot;&gt;&lt;a href=&quot;#gogland配置读取kubernetes代码&quot; class=&quot;headerlink&quot; title=&quot;gogland配置读取kubernetes代码&quot;&gt;&lt;/a&gt;gogland配置读取kubern
      
    
    </summary>
    
    
      <category term="kuberenetes" scheme="https://luolizhi.github.io/tags/kuberenetes/"/>
    
  </entry>
  
  <entry>
    <title>prometheus部署</title>
    <link href="https://luolizhi.github.io/2018/12/01/kubernetes%E9%83%A8%E7%BD%B2Prometheus%EF%BC%8C%E9%85%8D%E7%BD%AEgrafana/"/>
    <id>https://luolizhi.github.io/2018/12/01/kubernetes部署Prometheus，配置grafana/</id>
    <published>2018-12-01T10:29:38.000Z</published>
    <updated>2019-11-30T02:43:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes部署Prometheus-注意事项"><a href="#kubernetes部署Prometheus-注意事项" class="headerlink" title="kubernetes部署Prometheus 注意事项"></a>kubernetes部署Prometheus 注意事项</h1><p>安装参考<br><a href="https://blog.qikqiak.com/post/kubernetes-monitor-prometheus-grafana/" target="_blank" rel="noopener">https://blog.qikqiak.com/post/kubernetes-monitor-prometheus-grafana/</a></p><h2 id="需要在grafana中增加Prometheus为datasource"><a href="#需要在grafana中增加Prometheus为datasource" class="headerlink" title="需要在grafana中增加Prometheus为datasource"></a>需要在grafana中增加Prometheus为datasource</h2><h2 id="配置报警监控先在alerting中配置channel，比如钉钉，email等（）grafana4-4-3集成了钉钉。然后在配置的dashboard的graph中增加规则，触发告警系统。"><a href="#配置报警监控先在alerting中配置channel，比如钉钉，email等（）grafana4-4-3集成了钉钉。然后在配置的dashboard的graph中增加规则，触发告警系统。" class="headerlink" title="配置报警监控先在alerting中配置channel，比如钉钉，email等（）grafana4.4.3集成了钉钉。然后在配置的dashboard的graph中增加规则，触发告警系统。"></a>配置报警监控先在alerting中配置channel，比如钉钉，email等（）grafana4.4.3集成了钉钉。然后在配置的dashboard的graph中增加规则，触发告警系统。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kubernetes部署Prometheus-注意事项&quot;&gt;&lt;a href=&quot;#kubernetes部署Prometheus-注意事项&quot; class=&quot;headerlink&quot; title=&quot;kubernetes部署Prometheus 注意事项&quot;&gt;&lt;/a&gt;kuber
      
    
    </summary>
    
    
      <category term="k8s" scheme="https://luolizhi.github.io/tags/k8s/"/>
    
      <category term="prometheus" scheme="https://luolizhi.github.io/tags/prometheus/"/>
    
      <category term="grafana" scheme="https://luolizhi.github.io/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="https://luolizhi.github.io/2018/12/01/nginx/"/>
    <id>https://luolizhi.github.io/2018/12/01/nginx/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:47:11.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><h2 id="nginx-安装"><a href="#nginx-安装" class="headerlink" title="nginx 安装"></a>nginx 安装</h2><h3 id="1-yum安装"><a href="#1-yum安装" class="headerlink" title="1. yum安装"></a>1. yum安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.将nginx放到yum repro库中</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span></span><br><span class="line"><span class="comment"># 2.查看nginx信息</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum info nginx</span></span><br><span class="line"><span class="comment"># 3.使用yum安装ngnix</span></span><br><span class="line">[root@localhost ~]<span class="comment"># yum install nginx</span></span><br><span class="line"><span class="comment"># 4.启动nginx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># service nginx start</span></span><br><span class="line"><span class="comment"># 5.查看nginx版本</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nginx -v</span></span><br><span class="line"><span class="comment"># 6.访问nginx，现在你可以通过公网ip (本地可以通过 localhost /或 127.0.0.1 ) 查看nginx 服务返回的信息。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># curl -i localhost</span></span><br></pre></td></tr></table></figure><h3 id="2-源码安装"><a href="#2-源码安装" class="headerlink" title="2. 源码安装"></a>2. 源码安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.下载nginx包。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># wget http://nginx.org/download/nginx-1.14.0.tar.gz</span></span><br><span class="line"><span class="comment">#2.复制包到你的安装目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cp nginx-1.14.0.tar.gz /usr/local/</span></span><br><span class="line"><span class="comment"># 3.解压</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tar -zxvf nginx-1.14.0.tar.gz</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd nginx-1.14.0</span></span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 4.启动nginx</span></span><br><span class="line">[root@localhost ~]<span class="comment"># /usr/local/nginx/sbin/nginx</span></span><br><span class="line"><span class="comment"># 5.查看版本s</span></span><br><span class="line">[root@localhost ~]<span class="comment"># nginx -v</span></span><br><span class="line"><span class="comment">#6.url访问nginx localhost或127.0.0.1</span></span><br></pre></td></tr></table></figure><h3 id="安装其他模块"><a href="#安装其他模块" class="headerlink" title="安装其他模块"></a>安装其他模块</h3><p>在上述第3步</p><p><code>./configure --add-module=/path/to/module</code></p><p>后续继续执行即可</p><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><p>在/etc/rc.d/rc.local文件最后一行增加启动的命令<br><code>/usr/local/nginx/sbin/nginx</code><br><code>chmod +x /etc/rc.d/rc.local</code></p><h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../images/nginx配置文件结构图.png" alt="配置文件示意图" title>                </div>                <div class="image-caption">配置文件示意图</div>            </figure>  <p>yum安装的配置文件路径为<br><code>/etc/nginx/nginx.conf</code></p><p>源码安装的配置文件路径为<br><code>/usr/local/nginx/conf/nginx.conf</code></p><p>默认配置文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//这里可以配置其他server</span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"> // 这里可以增加include</span><br><span class="line"> // include /usr/<span class="built_in">local</span>/nginx/conf.d/*.conf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>修改配置可以直接在server中增加location，或者在http中增加server（参考上图和默认配置）</code></p><h2 id="nginx-常用操作"><a href="#nginx-常用操作" class="headerlink" title="nginx 常用操作"></a>nginx 常用操作</h2><p>启动 (以源码安装为例)<br><code>service nginx start</code><br>或者<br><code>/usr/local/nginx/sbin/nginx</code> </p><p>重启<br><code>/usr/local/nginx/sbin/nginx -s reload</code></p><p>停止<br> <code>/usr/local/nginx/sbin/nginx -s stop</code></p><h2 id="location-规则"><a href="#location-规则" class="headerlink" title="location 规则"></a>location 规则</h2><p>语法规则： location  [ 空格 | = | ~ | ~<em> | ^~| !~ | !~</em> ]     /uri/<br>            { … }<br>= 开头表示精确匹配<br>^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。<br>~ 开头表示区分大小写的正则匹配<br>~<em>  开头表示不区分大小写的正则匹配<br>!~和!~</em>分别为区分大小写不匹配及不区分大小写不匹配 的正则<br>/ 通用匹配，任何请求都会匹配到。<br>多个location配置的情况下匹配顺序为：<br><code>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</code>  </p><p>1.首先匹配=<br>2.其次匹配^~<br>3.再其次按照配置文件的顺序进行正则匹配、<br>4.最后是交给/进行通用匹配<br>注意：<br>当有匹配成功时，立刻停止匹配，按照当前匹配规则处理请求</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">=</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则A</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">=</span> <span class="string">/login</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则B</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">^~</span> <span class="string">/static/</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则C</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">~</span> <span class="string">\.(gif|jpg|png|js|css)$</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则D</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">~*</span> <span class="string">\.png$</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则E</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">!~</span> <span class="string">\.xhtml$</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则F</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">!~*</span> <span class="string">\.xhtml$</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则G</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="comment">#规则H</span></span><br></pre></td></tr></table></figure><p>那么产生的效果如下：<br>访问根目录/， 比如<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 将匹配规则A<br>访问 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a> 将匹配规则B，<a href="http://localhost/register" target="_blank" rel="noopener">http://localhost/register</a> 则匹配规则H<br>访问 <a href="http://localhost/static/a.html" target="_blank" rel="noopener">http://localhost/static/a.html</a> 将匹配规则C<br>访问 <a href="http://localhost/a.gif" target="_blank" rel="noopener">http://localhost/a.gif</a>, <a href="http://localhost/b.jpg" target="_blank" rel="noopener">http://localhost/b.jpg</a> 将匹配规则D和规则E，但是规则D顺序优先，规则E不起作用，而 <a href="http://localhost/static/c.png" target="_blank" rel="noopener">http://localhost/static/c.png</a> 则优先匹配到 规则C<br>访问 <a href="http://localhost/a.PNG" target="_blank" rel="noopener">http://localhost/a.PNG</a> 则匹配规则E， 而不会匹配规则D，因为规则E不区分大小写。<br>访问 <a href="http://localhost/a.xhtml" target="_blank" rel="noopener">http://localhost/a.xhtml</a> 不会匹配规则F和规则G，<a href="http://localhost/a.XHTML" target="_blank" rel="noopener">http://localhost/a.XHTML</a> 不会匹配规则G，因为不区分大小写。规则F，规则G属于排除法，<strong>符合匹配规则但是不会匹配到</strong>，所以想想看实际应用中哪里会用到。<br>访问 <a href="http://localhost/category/id/1111" target="_blank" rel="noopener">http://localhost/category/id/1111</a> 则最终匹配到规则H，因为以上规则都不匹配，这个时候应该是nginx转发请求给后端应用服务器，比如FastCGI（php），tomcat（jsp），nginx作为方向代理服务器存在。<br>所以实际使用中，通常至少有三个匹配规则定义，如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span></span><br><span class="line"><span class="comment">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span></span><br><span class="line"><span class="comment"># 第一个必选规则</span></span><br><span class="line"><span class="string">location</span> <span class="string">=</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://tomcat:8080/index</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span></span><br><span class="line"><span class="comment"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span></span><br><span class="line"><span class="string">location</span> <span class="string">^~</span> <span class="string">/static/</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">root</span> <span class="string">/webroot/static/;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">location</span> <span class="string">~*</span> <span class="string">\.(gif|jpg|jpeg|png|css|js|ico)$</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">root</span> <span class="string">/webroot/res/;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span></span><br><span class="line"><span class="comment">#非静态文件请求就默认是动态请求，自己根据实际把握</span></span><br><span class="line"><span class="comment">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span></span><br><span class="line"><span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://tomcat:8080/</span></span><br></pre></td></tr></table></figure></p><h2 id="显示真实ip地址"><a href="#显示真实ip地址" class="headerlink" title="显示真实ip地址"></a>显示真实ip地址</h2><p>在配置文件中，location，proxy_pass之前增加下面三行<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">Host</span> <span class="string">$host;</span></span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">X-Real-IP</span> <span class="string">$remote_addr;</span></span><br><span class="line">    <span class="string">proxy_set_header</span> <span class="string">X-Forwarded-For</span> <span class="string">$proxy_add_x_forwarded_for;</span></span><br><span class="line">    </span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://tomcat:8080/</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="nginx-try-files-用法"><a href="#nginx-try-files-用法" class="headerlink" title="nginx try_files 用法"></a>nginx try_files 用法</h2><p>要使非HTML请求实际资源不存在时响应404，方法是：若请求的资源不是HTML，则放弃尝试后备文件。<br>要使得try_files不影响index和/与autoindex，方法是：若请求的路径是目录，则放弃尝试后备文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">location</span> <span class="string">/</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">root</span> <span class="string">/var/www/mysite;</span></span><br><span class="line">    <span class="string">index</span> <span class="string">index.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">autoindex</span> <span class="string">on;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">set</span> <span class="string">$fallback_file</span> <span class="string">/index.html;</span></span><br><span class="line">    <span class="string">if</span> <span class="string">($http_accept</span> <span class="string">!~</span> <span class="string">text/html)</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">set</span> <span class="string">$fallback_file</span> <span class="string">/null;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">if</span> <span class="string">($uri</span> <span class="string">~</span> <span class="string">/$)</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="string">set</span> <span class="string">$fallback_file</span> <span class="string">$uri;</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">try_files</span> <span class="string">$uri</span> <span class="string">$fallback_file;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>首页在/login不跳转时增加上述配置解决问题.(微信端登录bug)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx&quot;&gt;&lt;a href=&quot;#nginx&quot; class=&quot;headerlink&quot; title=&quot;nginx&quot;&gt;&lt;/a&gt;nginx&lt;/h1&gt;&lt;h2 id=&quot;nginx-安装&quot;&gt;&lt;a href=&quot;#nginx-安装&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="linux" scheme="https://luolizhi.github.io/tags/linux/"/>
    
      <category term="nginx" scheme="https://luolizhi.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ansible 基本语法</title>
    <link href="https://luolizhi.github.io/2018/12/01/ansible%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://luolizhi.github.io/2018/12/01/ansible基本语法/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:55:34.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ansible-基本语法"><a href="#ansible-基本语法" class="headerlink" title="ansible 基本语法"></a>ansible 基本语法</h1><p><a href="http://ansible-tran.readthedocs.io/en/latest/" target="_blank" rel="noopener">Ansible中文权威指南</a><br><a href="http://docs.linux.xyz/docs/show/123" target="_blank" rel="noopener">Ansible教程</a><br><a href="https://github.com/fasss/redis-in-action/wiki/ansible%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0" target="_blank" rel="noopener">Ansible基础学习</a>  </p><ul><li><h2 id="command模块：是Ansible默认执行模块，在远程主机执行-shell-指令"><a href="#command模块：是Ansible默认执行模块，在远程主机执行-shell-指令" class="headerlink" title="command模块：是Ansible默认执行模块，在远程主机执行 shell 指令"></a>command模块：是Ansible默认执行模块，在远程主机执行 shell 指令</h2><strong>用法</strong><br>下面两种方法等价，默认执行command<br><code>ansible all -a &quot;pwd&quot;</code><br><code>ansible all -m command -a &quot;pwd&quot;</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭系统</span></span><br><span class="line"><span class="string">-command:</span> <span class="string">/sbin/shutdown</span> <span class="string">-t</span> <span class="string">now</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当指定的文件存在时，跳过不执行该命令</span></span><br><span class="line"><span class="string">-command:</span> <span class="string">/usr/bin/make_database.sh</span> <span class="string">arg1</span> <span class="string">arg2</span> <span class="string">creates=/path/to/database</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当指定不文件存在时，则该命令将会执行</span></span><br><span class="line"><span class="string">-command:</span> <span class="string">/usr/bin/make_database.sh</span> <span class="string">arg1</span> <span class="string">arg2</span> <span class="string">creates=/path/to/database</span></span><br></pre></td></tr></table></figure><p>注：这个模块不支持管道和重定向，要支持管道可以用-m shell 或者-m raw，shell 和 raw 语法一样，它们支持管道和重定向，如：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">shell:</span> <span class="string">ifconfig|grep</span> <span class="string">inet|grep</span> <span class="string">-Ev</span> <span class="string">'127.'</span><span class="string">|cut</span> <span class="string">-d':'</span> <span class="string">-f2|cut</span> <span class="string">-d'</span> <span class="string">' -f1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- raw: ifconfig|grep inet|grep -Ev '</span><span class="number">127</span><span class="string">.'|cut</span> <span class="string">-d':'</span> <span class="string">-f2|cut</span> <span class="string">-d'</span> <span class="string">' -f1 &gt; /tmp/ip.log</span></span><br></pre></td></tr></table></figure></p><ul><li><h2 id="file模块：设置文件的属性"><a href="#file模块：设置文件的属性" class="headerlink" title="file模块：设置文件的属性"></a>file模块：设置文件的属性</h2></li></ul><p><strong>用法</strong><br><code>ansible all -m stat -a &quot;path=/root/ansible&quot;</code></p><pre><code>(1) 创建目录：    -a &quot;path=  state=directory&quot;(2) 创建链接文件：    -a &quot;path=  src=  state=link&quot;(3) 删除文件：    -a &quot;path=  state=absent&quot;</code></pre><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹,recurse=yes 递归，相当于 mkdir -p</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">path=/root/soft/</span> <span class="string">state=directory</span> <span class="string">mode=0755</span> <span class="string">recurse=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">path=/etc/foo.conf</span> <span class="string">state=touch</span> <span class="string">mode="u=rw,g-wx,o-rwx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">path=/root/soft</span> <span class="string">state=absent</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件目录属性</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">path=/root/soft</span> <span class="string">mode=750</span> <span class="string">owner=ops</span> <span class="string">group=ops</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件软件链接</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">src=/file/link</span> <span class="string">dest=/path/symlink</span> <span class="string">owner=foo</span> <span class="string">group=foo</span> <span class="string">state=link</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量创建文件软件链接</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">src=/tmp/&#123;&#123;</span> <span class="string">item.src</span> <span class="string">&#125;&#125;</span> <span class="string">dest=&#123;&#123;</span> <span class="string">item.dest</span> <span class="string">&#125;&#125;</span> <span class="string">state=link</span></span><br><span class="line"> <span class="attr">with_items:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">src:</span> <span class="string">'x'</span><span class="string">,</span> <span class="attr">dest:</span> <span class="string">'y'</span> <span class="string">&#125;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&#123;</span> <span class="attr">src:</span> <span class="string">'z'</span><span class="string">,</span> <span class="attr">dest:</span> <span class="string">'k'</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ansible]<span class="comment"># ansible all -m file -a "path=/root/ansible state=directory"</span></span><br><span class="line">192.168.101.229 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0755"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/root/ansible"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"unconfined_u:object_r:admin_home_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 6, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"directory"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.104 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0755"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/root/ansible"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"unconfined_u:object_r:admin_home_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 6, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"directory"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.100.197 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0755"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/root/ansible"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"unconfined_u:object_r:admin_home_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 21, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"directory"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h2 id="copy模块：复制文件到远程主机"><a href="#copy模块：复制文件到远程主机" class="headerlink" title="copy模块：复制文件到远程主机"></a>copy模块：复制文件到远程主机</h2></li></ul><p><strong>用法</strong><br>`ansible all -m copy -a “src=/root/ansible/testfile dest=/root/ansible/testfile  mode=600”<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制 redis 服务脚本到远程主机机器，force 为强制性复制</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=/data/ansible/file/redis/redis-server</span> <span class="string">dest=/etc/init.d/</span> <span class="string">mode=750</span> <span class="string">owner=root</span> <span class="string">group=root</span> <span class="string">force=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制目录，directory_mode 目录模式</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=/root/nginx</span> <span class="string">dest=/root/nginx</span> <span class="string">mode=750</span> <span class="string">owner=ops</span> <span class="string">group=ops</span> <span class="string">directory_mode=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制前对文件进行备份，backup=yes</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=/srv/myfiles/foo.conf</span> <span class="string">dest=/etc/foo.conf</span> <span class="string">owner=foo</span> <span class="string">group=foo</span> <span class="string">mode="u+rw,g-wx,o-rwx"</span> <span class="string">backup=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个文件的复制，采用循环 with_items</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">dest=/root/</span></span><br><span class="line"> <span class="attr">with_items:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/data/a.sh</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/logs/b.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件通配符循环 with_fileglob</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">copy:</span> <span class="string">src=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">dest=/etc/fooapp/</span> <span class="string">owner=root</span> <span class="string">mode=600</span></span><br><span class="line"> <span class="attr">with_fileglob:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/playbooks/files/fooapp/*</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ansible]<span class="comment"># ansible all -m copy -a "src=/root/ansible/testfile dest=/root/ansible/testfile  mode=600"</span></span><br><span class="line">192.168.101.229 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"795f9549ca9d7715279a63ff49b5b801da3ec0ad"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/root/ansible/testfile"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"82f25f5116f96ba86889e004f41ecb86"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0600"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"system_u:object_r:admin_home_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 22, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1533262319.99-21402740317520/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.101.104 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"795f9549ca9d7715279a63ff49b5b801da3ec0ad"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/root/ansible/testfile"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"md5sum"</span>: <span class="string">"82f25f5116f96ba86889e004f41ecb86"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0600"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"system_u:object_r:admin_home_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 22, </span><br><span class="line">    <span class="string">"src"</span>: <span class="string">"/root/.ansible/tmp/ansible-tmp-1533262319.98-120771157809251/source"</span>, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br><span class="line">192.168.100.197 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"checksum"</span>: <span class="string">"795f9549ca9d7715279a63ff49b5b801da3ec0ad"</span>, </span><br><span class="line">    <span class="string">"dest"</span>: <span class="string">"/root/ansible/testfile"</span>, </span><br><span class="line">    <span class="string">"gid"</span>: 0, </span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"mode"</span>: <span class="string">"0600"</span>, </span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"root"</span>, </span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"/root/ansible/testfile"</span>, </span><br><span class="line">    <span class="string">"secontext"</span>: <span class="string">"unconfined_u:object_r:admin_home_t:s0"</span>, </span><br><span class="line">    <span class="string">"size"</span>: 22, </span><br><span class="line">    <span class="string">"state"</span>: <span class="string">"file"</span>, </span><br><span class="line">    <span class="string">"uid"</span>: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>libel</code></pre><ul><li><h2 id="stat模块"><a href="#stat模块" class="headerlink" title="stat模块"></a>stat模块</h2><strong>用法</strong><br><code>ansible all -m stat -a &quot;path=/root/ansible&quot;</code></li></ul><p>判断文件是否存在<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断一个路径是存在，且是一个目录</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">stat:</span> <span class="string">path=/path/to/something</span></span><br><span class="line"> <span class="attr">register:</span> <span class="string">reg</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="Path</span> <span class="string">exists</span> <span class="string">and</span> <span class="string">is</span> <span class="string">a</span> <span class="string">directory"</span></span><br><span class="line"> <span class="attr">when:</span> <span class="string">reg.stat.isdir</span> <span class="string">is</span> <span class="string">defined</span> <span class="string">and</span> <span class="string">p.stat.isdir</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件属主是否发生改变</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">stat:</span> <span class="string">path=/etc/foo.conf</span></span><br><span class="line"> <span class="attr">register:</span> <span class="string">reg</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">fail:</span> <span class="string">msg="Oh,file</span> <span class="string">ownership</span> <span class="string">has</span> <span class="string">changed"</span></span><br><span class="line"> <span class="attr">when:</span> <span class="string">re.stat.pw_name</span> <span class="string">!=</span> <span class="string">"root"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否存</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">stat:</span> <span class="string">path=/path/to/something</span></span><br><span class="line"> <span class="attr">register:</span> <span class="string">reg</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="file</span> <span class="string">doesn't</span> <span class="string">exist"</span></span><br><span class="line"> <span class="attr">when:</span> <span class="string">not</span> <span class="string">reg.stat.exists</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">msg="file</span> <span class="string">is</span> <span class="string">exist"</span></span><br><span class="line"> <span class="attr">when:</span> <span class="string">reg.stat.exists</span></span><br></pre></td></tr></table></figure></p><ul><li><h2 id="hostname模块：管理主机名"><a href="#hostname模块：管理主机名" class="headerlink" title="hostname模块：管理主机名"></a>hostname模块：管理主机名</h2></li></ul><p><strong>用法</strong><br>    name=<br>appserver 是group name，在/etc/ansible/hosts中设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ansible]<span class="comment"># ansible all -a "hostname"</span></span><br><span class="line">192.168.101.104 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br><span class="line">192.168.100.197 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br><span class="line">192.168.101.229 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br><span class="line">[root@localhost ansible]<span class="comment"># ansible appserver -a "hostname"   </span></span><br><span class="line">192.168.101.229 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br><span class="line">192.168.101.104 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">localhost.localdomain</span><br><span class="line"></span><br><span class="line">192.168.100.197 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">localhost.localdomain</span><br></pre></td></tr></table></figure></p><ul><li><h2 id="yum模块：使用yum命令完成程序包管理"><a href="#yum模块：使用yum命令完成程序包管理" class="headerlink" title="yum模块：使用yum命令完成程序包管理"></a>yum模块：使用yum命令完成程序包管理</h2></li></ul><p><strong>用法</strong><br><code>ansible all -m yum -a &quot;name=lrzsz&quot;</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装最新版本的</span> <span class="string">Apache</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=latest</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">删除</span> <span class="string">Apache</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=absent</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">从指定的</span> <span class="string">yum</span> <span class="string">源安装最新版本的</span> <span class="string">Apache</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">enablerepo=epel</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装指定</span> <span class="string">url</span> <span class="string">的</span> <span class="string">RPM</span> <span class="string">包</span></span><br><span class="line"><span class="attr">yum:</span> <span class="string">name=http://mirrors.sohu.com/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装指定版本号的</span> <span class="string">Apache</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name=httpd-2.2.29-1.4.amzn1</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">更新系统所有的包</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name=*</span> <span class="string">state=latest</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">从本地路径上安装指定的</span> <span class="string">nginx</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name=/usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm</span> <span class="string">s</span></span><br><span class="line"><span class="string">tate=present</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装系统开发工具包</span></span><br><span class="line"> <span class="attr">yum:</span> <span class="string">name="@Development</span> <span class="string">tools"</span> <span class="string">state=present</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m yum -a <span class="string">"name=samba"</span> //安装</span><br><span class="line">ansible all -m yum -a <span class="string">"name=samba state=removed"</span>  //卸载</span><br></pre></td></tr></table></figure><ul><li><h2 id="service模块：主要用于系统服务管理-包括启动、关闭、重启、以及设置开机启动等"><a href="#service模块：主要用于系统服务管理-包括启动、关闭、重启、以及设置开机启动等" class="headerlink" title="service模块：主要用于系统服务管理,包括启动、关闭、重启、以及设置开机启动等"></a>service模块：主要用于系统服务管理,包括启动、关闭、重启、以及设置开机启动等</h2></li></ul><p><strong>用法</strong><br><code>ansible all -m service -a &quot;name=vdftpd state=started enabled=yes&quot;</code><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务,并设置开机启动</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">service:</span> <span class="string">name=vsftpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">service:</span> <span class="string">name=vsftpd</span> <span class="string">state=stopped</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">service:</span> <span class="string">name=vsftpd</span> <span class="string">state=restarted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载服务</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">service:</span> <span class="string">name=vsftpd</span> <span class="string">state=reloaded</span></span><br></pre></td></tr></table></figure></p><ul><li><h2 id="group模块：增加或删除组"><a href="#group模块：增加或删除组" class="headerlink" title="group模块：增加或删除组"></a>group模块：增加或删除组</h2><strong>用法</strong><br><code>ansible all -m group -a &quot;name=ftp gid=1024 state=present&quot;</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户组</span></span><br><span class="line"><span class="attr">group:</span> <span class="string">name=lipeibin</span> <span class="string">gid=1024</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户组</span></span><br><span class="line"><span class="attr">group:</span> <span class="string">name=lipeibin</span> <span class="string">state=absent</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="user模块：用户管理"><a href="#user模块：用户管理" class="headerlink" title="user模块：用户管理"></a>user模块：用户管理</h2><strong>用法</strong><br><code>ansible all -m user -a &quot;name=ftp groups=ftp&quot;</code> </li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户 lipeibin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">user:</span> <span class="string">name=lipeibin</span> <span class="string">groups=lipeibin</span> <span class="string">shell=/sbin/nologin</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户 lipeibin,并删除用户主目录/home/lipeibin</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">user:</span> <span class="string">name=lipeibin</span> <span class="string">state=absent</span> <span class="string">remove=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户 lipeibin,并且设置密码，归属 ops 组</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">user:</span> <span class="string">name=lipeibin</span> <span class="string">password=”19890506”|</span> <span class="string">password_hash('sha512')</span> <span class="string">group=ops</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户有效时间</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">user:</span> <span class="string">name=lipeibin</span> <span class="string">shell=/bin/bash</span> <span class="string">groups=ops</span> <span class="string">expires=1422403387</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m file -a &quot;path=/root/ansible state=directory&quot;   //在所有节点上创建文件夹  -file模块</span><br><span class="line">ansible all -m copy -a &quot;src=/root/ansible/testfile dest=/root/ansible/testfile  mode=600&quot;  //复制文件到所有节点  copy模块</span><br><span class="line">ansible all -m shell  -a &quot;netstat -nltp | grep 80&quot;  //检测端口</span><br></pre></td></tr></table></figure><ul><li><h2 id="replace模块主要用于搜索匹配替换，类似于-linux-命令-sed"><a href="#replace模块主要用于搜索匹配替换，类似于-linux-命令-sed" class="headerlink" title="replace模块主要用于搜索匹配替换，类似于 linux 命令 sed"></a>replace模块主要用于搜索匹配替换，类似于 linux 命令 sed</h2><strong>用法</strong><br><code>ansible all -m replace ???</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把 old.host.name 替换成 new.host.name</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">replace:</span> <span class="string">dest=/etc/hosts</span> <span class="string">regexp='(\s+)old\.host\.name(\s+.*)?$'</span> <span class="string">replace='\1new.host.name\2'</span> <span class="string">owner=jdoe</span> <span class="string">group=jdoe</span> <span class="string">mode=644</span> <span class="string">backup=yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 Listen 80 和 NameVirtualHost 80 分别替换成 Listen 127.0.0.1:8080 和 Name</span></span><br><span class="line"><span class="string">VirtualHost</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">replace:</span> <span class="string">dest=/etc/apache/ports</span> <span class="string">regexp='^(NameVirtualHost|Listen)\s+80\s*$'</span> <span class="string">replace='\1</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080''</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="PlayBook"><a href="#PlayBook" class="headerlink" title="PlayBook"></a>PlayBook</h1><h3 id="核心元素："><a href="#核心元素：" class="headerlink" title="核心元素："></a>核心元素：</h3><pre><code>Tasks：任务，由模块定义的操作的列表；Variables：变量Templates：模板，即使用了模板语法的文本文件；Handlers：由特定条件触发的Tasks；Roles：角色；playbook的基础组件：    Hosts：运行指定任务的目标主机；    remote_user：在远程主机以哪个用户身份执行；        sudo_user：非管理员需要拥有sudo权限；    tasks：任务列表        模块，模块参数：            格式：                (1) action: module arguments                (2) module: arguments</code></pre><h3 id="运行playbook，使用ansible-playbook命令"><a href="#运行playbook，使用ansible-playbook命令" class="headerlink" title="运行playbook，使用ansible-playbook命令"></a>运行playbook，使用ansible-playbook命令</h3><pre><code>(1) 检测语法    ansible-playbook  --syntax-check  /path/to/playbook.yaml(2) 测试运行  -C 是测试    ansible-playbook -C /path/to/playbook.yaml        --list-hosts        --list-tasks        --list-tags(3) 运行    ansible-playbook  /path/to/playbook.yaml        -t TAGS, --tags=TAGS        --skip-tags=SKIP_TAGS        --start-at-task=START_AT</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -C group.yml</span><br></pre></td></tr></table></figure><ul><li><h2 id="tags：给指定的任务定义一个调用标识；"><a href="#tags：给指定的任务定义一个调用标识；" class="headerlink" title="tags：给指定的任务定义一个调用标识；"></a>tags：给指定的任务定义一个调用标识；</h2></li></ul><p>使用格式：</p><pre><code>- name: NAME    module: arguments    tags: TAG_ID</code></pre><ul><li><h2 id="Variables：变量"><a href="#Variables：变量" class="headerlink" title="Variables：变量"></a>Variables：变量</h2><p>  类型：</p><pre><code>内建：    (1) facts自定义：    (1) 命令行传递；        -e VAR=VALUE    (2) 在hosts Inventory中为每个主机定义专用变量值；        (a) 向不同的主机传递不同的变量 ；            IP/HOSTNAME variable_name=value        (b) 向组内的所有主机传递相同的变量 ；            [groupname:vars]            variable_name=value    (3) 在playbook中定义        vars:            - var_name: value            - var_name: value    (4) Inventory还可以使用参数：        用于定义ansible远程连接目标主机时使用的属性，而非传递给playbook的变量；            ansible_ssh_host            ansible_ssh_port            ansible_ssh_user            ansible_ssh_pass            ansible_sudo_pass            ...    (5) 在角色调用时传递        roles:            - { role: ROLE_NAME, var: value, ...}            变量调用：            ` var_name `</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ansible-基本语法&quot;&gt;&lt;a href=&quot;#ansible-基本语法&quot; class=&quot;headerlink&quot; title=&quot;ansible 基本语法&quot;&gt;&lt;/a&gt;ansible 基本语法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://ansible-tran.r
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://luolizhi.github.io/tags/ansible/"/>
    
      <category term="linux" scheme="https://luolizhi.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装apache文件下载服务器</title>
    <link href="https://luolizhi.github.io/2018/12/01/centos7%E5%AE%89%E8%A3%85apache%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://luolizhi.github.io/2018/12/01/centos7安装apache文件下载服务器/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:54:49.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装apache文件下载服务器"><a href="#centos7安装apache文件下载服务器" class="headerlink" title="centos7安装apache文件下载服务器"></a>centos7安装apache文件下载服务器</h1><h2 id="part-1安装httpd"><a href="#part-1安装httpd" class="headerlink" title="part.1安装httpd"></a>part.1安装httpd</h2><p><code>yum install -y httpd</code></p><h2 id="part-2-设置开机启动项"><a href="#part-2-设置开机启动项" class="headerlink" title="part.2 设置开机启动项"></a>part.2 设置开机启动项</h2><p><code>systemctl enable httpd`</code></p><h2 id="part-3-修改配置文件"><a href="#part-3-修改配置文件" class="headerlink" title="part.3 修改配置文件"></a>part.3 修改配置文件</h2><p>配置文件地址为：<br>/etc/httpd/conf/httpd.conf<br>修改配置文件Listen 80<br><code>vim /etc/httpd/conf/httpd.conf</code><br>例：Listen 8051 //80为默认访问端口,若该为其它端口，首先要保证端口没有被占用，访问时也需要加端口号</p><h2 id="part-4指定提供下载的目录地址"><a href="#part-4指定提供下载的目录地址" class="headerlink" title="part.4指定提供下载的目录地址"></a>part.4指定提供下载的目录地址</h2><p>因apache服务显示的地址默认为 /var/www/html<br>我们进入此地址</p><p>cd /var/www/html<br>建立文件目录软链接<br>输入ln -s 文件目录地址 下载地址<br>例：</p><p> ln -s /home/downloads downloads<br>即在/var/www/html目录建立新的文件夹downloads,并且链接到/home/downloads目录</p><h2 id="part-5-启动服务查看效果"><a href="#part-5-启动服务查看效果" class="headerlink" title="part.5 启动服务查看效果"></a>part.5 启动服务查看效果</h2><p><code>systemctl httpd start</code><br>访问此文件目录进行下载即在浏览器输入<br>http://[ip]/downloads<br>即可看到/home/downloads目录下的所有文件和文件夹</p><p>如果显示访问超时，需要把防火墙关闭。</p><p><code>systemctl stop firewalld.service</code><br>再次访问即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos7安装apache文件下载服务器&quot;&gt;&lt;a href=&quot;#centos7安装apache文件下载服务器&quot; class=&quot;headerlink&quot; title=&quot;centos7安装apache文件下载服务器&quot;&gt;&lt;/a&gt;centos7安装apache文件下载服
      
    
    </summary>
    
    
      <category term="apache" scheme="https://luolizhi.github.io/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>centos搭建ftp服务器</title>
    <link href="https://luolizhi.github.io/2018/12/01/centos7%E5%AE%89%E8%A3%85ftp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://luolizhi.github.io/2018/12/01/centos7安装ftp服务器/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:53:55.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos搭建ftp服务器"><a href="#centos搭建ftp服务器" class="headerlink" title="centos搭建ftp服务器"></a>centos搭建ftp服务器</h1><p>系统环境<br><code>Centos7.2</code></p><p>安装步骤<br>通过yum来安装vsftpd<br><code>sudo yum -y install vsftpd</code></p><p>设置为开机启动<br><code>sudo chkconfig vsftpd on</code></p><p>修改配置<br><code>vim /etc/vsftpd/vsftpd.conf</code></p><p>修改如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">chroot_local_user=YES      #这行可能需自己写</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br></pre></td></tr></table></figure></p><blockquote><p>注：chroot_local_user #是否将所有用户限制在主目录,YES为启用 NO禁用.(该项默认值是NO,即在安装vsftpd后不做配置的话，ftp用户是可以向上切换到要目录之外的)</p></blockquote><p>配置保存后，重启vsftpd服务<br><code>sudo service vsftpd restart</code></p><p>添加用户<br>添加vsftpd账号,并制定ftp<br><code>sudo useradd d /home/ftpdir -s /sbin/nologin vsftpd</code></p><p>为账号设置密码，按提示操作<br>sudo passwd vsftpd<br>为用户的目录修改权限，实现上传和下载文件<br><code>sudo chmod o+w /home/ftpdir</code></p><p>配置Centos防火墙<br>添加ip_conntrack_ftp模块<br><code>sudo vi /etc/sysconfig/iptables-config</code></p><p>添加下面一行<br><code>IPTABLES_MODULES=&quot;ip_conntrack_ftp&quot;</code></p><p>打开ftp端口21<br><code>sudo vi /etc/sysconfig/iptables</code><br>添加下面一行</p><p><code>-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT</code></p><p>重启iptables使新的规则生效<br><code>sudo service iptables restart</code></p><p>测试<br>可用WinSCP进行测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos搭建ftp服务器&quot;&gt;&lt;a href=&quot;#centos搭建ftp服务器&quot; class=&quot;headerlink&quot; title=&quot;centos搭建ftp服务器&quot;&gt;&lt;/a&gt;centos搭建ftp服务器&lt;/h1&gt;&lt;p&gt;系统环境&lt;br&gt;&lt;code&gt;Centos7.
      
    
    </summary>
    
    
      <category term="ftp" scheme="https://luolizhi.github.io/tags/ftp/"/>
    
  </entry>
  
  <entry>
    <title>centos7 安装ansible</title>
    <link href="https://luolizhi.github.io/2018/12/01/centos7%E5%AE%89%E8%A3%85ansible/"/>
    <id>https://luolizhi.github.io/2018/12/01/centos7安装ansible/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:51:31.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7-安装ansible"><a href="#centos7-安装ansible" class="headerlink" title="centos7 安装ansible"></a>centos7 安装ansible</h1><h2 id="1-每个节点安装-依赖工具"><a href="#1-每个节点安装-依赖工具" class="headerlink" title="1. 每个节点安装 依赖工具"></a>1. 每个节点安装 依赖工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 文档中脚本默认均以root用户执行</span><br><span class="line"># 安装 epel 源并更新</span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum update</span><br><span class="line"># 安装python</span><br><span class="line">yum install python -y</span><br></pre></td></tr></table></figure><h2 id="2-在deploy-节点安装及准备ansible"><a href="#2-在deploy-节点安装及准备ansible" class="headerlink" title="2. 在deploy 节点安装及准备ansible"></a>2. 在deploy 节点安装及准备ansible</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ansible</span><br></pre></td></tr></table></figure><h2 id="3-在deploy节点配置免密码登陆"><a href="#3-在deploy节点配置免密码登陆" class="headerlink" title="3.在deploy节点配置免密码登陆"></a>3.在deploy节点配置免密码登陆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 2048 回车 回车 回车</span><br><span class="line">ssh-copy-id $IPs    #$IPs为所有节点地址包括自身，按照提示输入yes 和root密码</span><br></pre></td></tr></table></figure><p><strong>批量添加密码的脚本</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for i in $(seq 111 116);</span><br><span class="line">do</span><br><span class="line">ip=&quot;10.0.1.&quot;$i;</span><br><span class="line">echo $ip</span><br><span class="line">sshpass -p &apos;123456&apos; ssh-copy-id -o StrictHostKeyChecking=no  $ip</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="4-验证ansible安装，正常能看到每个节点返回-SUCCESS"><a href="#4-验证ansible安装，正常能看到每个节点返回-SUCCESS" class="headerlink" title="4. 验证ansible安装，正常能看到每个节点返回 SUCCESS"></a>4. 验证ansible安装，正常能看到每个节点返回 SUCCESS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m ping</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;centos7-安装ansible&quot;&gt;&lt;a href=&quot;#centos7-安装ansible&quot; class=&quot;headerlink&quot; title=&quot;centos7 安装ansible&quot;&gt;&lt;/a&gt;centos7 安装ansible&lt;/h1&gt;&lt;h2 id=&quot;1-每个节
      
    
    </summary>
    
    
      <category term="ansible" scheme="https://luolizhi.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes glusterfs</title>
    <link href="https://luolizhi.github.io/2018/12/01/kubernetes-glusterfs/"/>
    <id>https://luolizhi.github.io/2018/12/01/kubernetes-glusterfs/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:58:20.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes-glusterfs"><a href="#kubernetes-glusterfs" class="headerlink" title="kubernetes glusterfs"></a>kubernetes glusterfs</h1><h2 id="安装-glusterfs"><a href="#安装-glusterfs" class="headerlink" title="安装 glusterfs"></a>安装 glusterfs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 先安装 gluster 源</span><br><span class="line">yum install centos-release-gluster -y</span><br><span class="line"></span><br><span class="line"># 安装 glusterfs 组件</span><br><span class="line">yum install -y glusterfs glusterfs-server glusterfs-fuse glusterfs-rdma glusterfs-geo-replication glusterfs-devel</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 创建 glusterfs 目录</span><br><span class="line"></span><br><span class="line">mkdir /opt/glusterd</span><br><span class="line"></span><br><span class="line">## 修改 glusterd 目录</span><br><span class="line">sed -i &apos;s/var\/lib/opt/g&apos; /etc/glusterfs/glusterd.vol</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 启动 glusterfs</span><br><span class="line">systemctl start glusterd.service</span><br><span class="line"></span><br><span class="line"># 设置开机启动</span><br><span class="line">systemctl enable glusterd.service</span><br><span class="line"></span><br><span class="line">#查看状态</span><br><span class="line">systemctl status glusterd.service</span><br></pre></td></tr></table></figure><h2 id="配置-glusterfs"><a href="#配置-glusterfs" class="headerlink" title="配置 glusterfs"></a>配置 glusterfs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 配置 hosts</span><br><span class="line"></span><br><span class="line">vi /etc/hosts</span><br><span class="line"></span><br><span class="line">gluster-1  10.6.0.52</span><br><span class="line">gluster-2  10.6.0.53</span><br><span class="line">gluster-3  10.6.0.55</span><br><span class="line">gluster-4  10.6.0.56</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 开放端口</span><br><span class="line"></span><br><span class="line">iptables -I INPUT -p tcp --dport 24007 -j ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 创建存储目录</span><br><span class="line"></span><br><span class="line">mkdir /opt/gfs_data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 添加节点到 集群</span><br><span class="line"># 执行操作的本机不需要probe 本机</span><br><span class="line">[root@gluster-1 ~]#</span><br><span class="line">gluster peer probe gluster-2</span><br><span class="line">gluster peer probe gluster-3</span><br><span class="line">gluster peer probe gluster-4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看集群状态</span><br><span class="line">gluster peer status</span><br></pre></td></tr></table></figure><h2 id="配置-volume"><a href="#配置-volume" class="headerlink" title="配置 volume"></a>配置 volume</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 创建 分布卷</span><br><span class="line">gluster volume create dht-volume transport tcp gluster-1:/opt/gfs_data gluster-2:/opt/gfs_data</span><br><span class="line"></span><br><span class="line"># 查看volume状态</span><br><span class="line">gluster volume info</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Type: Distribute</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 启动 分布卷</span><br><span class="line">gluster volume start dht-volume</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建 复制卷</span><br><span class="line"></span><br><span class="line">gluster volume create afr-volume replica 2 transport tcp gluster-1:/opt/afr_data gluster-2:/opt/afr_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看volume状态</span><br><span class="line">gluster volume info</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Type: Replicate</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 启动 复制卷</span><br><span class="line">gluster volume start afr-volume</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 创建 条带卷</span><br><span class="line">gluster volume create str-volume stripe 2 transport tcp gluster-1:/opt/str_data gluster-2:/opt/str_data</span><br><span class="line"></span><br><span class="line"># 查看volume状态</span><br><span class="line">gluster volume info</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Type: Stripe</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 启动 条带卷</span><br><span class="line">gluster volume start str-volume</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 上面三种基本模式，可以互相组合</span><br><span class="line"></span><br><span class="line"># 这里我们使用 组合 分布式复制卷 需要最少4台服务器 replica 必须为倍数</span><br><span class="line"></span><br><span class="line">gluster volume create k8s-volume replica 2 transport tcp gluster-1:/opt/gfs_data gluster-2:/opt/gfs_data gluster-3:/opt/gfs_data gluster-4:/opt/gfs_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 volume 状态</span><br><span class="line"></span><br><span class="line">gluster volume info</span><br><span class="line"></span><br><span class="line">Volume Name: k8s-volume</span><br><span class="line">Type: Distributed-Replicate</span><br><span class="line">Volume ID: 981c41fa-bbe1-4a36-a1e2-9f76de1dc8f1</span><br><span class="line">Status: Created</span><br><span class="line">Snapshot Count: 0</span><br><span class="line">Number of Bricks: 2 x 2 = 4</span><br><span class="line">Transport-type: tcp</span><br><span class="line">Bricks:</span><br><span class="line">Brick1: gluster-1:/opt/gfs_data</span><br><span class="line">Brick2: gluster-2:/opt/gfs_data</span><br><span class="line">Brick3: gluster-3:/opt/gfs_data</span><br><span class="line">Brick4: gluster-4:/opt/gfs_data</span><br><span class="line">Options Reconfigured:</span><br><span class="line">transport.address-family: inet</span><br><span class="line">nfs.disable: on</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动 k8s-volume</span><br><span class="line">gluster volume start k8s-volume</span><br></pre></td></tr></table></figure><h2 id="gluster-调优"><a href="#gluster-调优" class="headerlink" title="gluster 调优"></a>gluster 调优</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 开启 指定 volume 的配额</span><br><span class="line">gluster volume quota k8s-volume enable</span><br><span class="line"></span><br><span class="line"># 限制 指定 volume 的配额</span><br><span class="line">gluster volume quota k8s-volume limit-usage / 5TB</span><br><span class="line"></span><br><span class="line"># 设置 cache 大小, 默认32MB</span><br><span class="line">gluster volume set k8s-volume performance.cache-size 4GB</span><br><span class="line"></span><br><span class="line"># 设置 io 线程, 太大会导致进程崩溃</span><br><span class="line">gluster volume set k8s-volume performance.io-thread-count 16</span><br><span class="line"></span><br><span class="line"># 设置 网络检测时间, 默认42s</span><br><span class="line">gluster volume set k8s-volume network.ping-timeout 10</span><br><span class="line"></span><br><span class="line"># 设置 目录索引的自动愈合进程</span><br><span class="line">gluster volume set k8s-volume cluster.self-heal-daemon on</span><br><span class="line"></span><br><span class="line"># 设置 自动愈合的检测间隔, 默认600s</span><br><span class="line">gluster volume set k8s-volume cluster.heal-timeout 300</span><br><span class="line"></span><br><span class="line"># 设置 写缓冲区的大小, 默认1M</span><br><span class="line">gluster volume set k8s-volume performance.write-behind-window-size 1024MB</span><br></pre></td></tr></table></figure><h1 id="kubernetes-配置-glusterfs"><a href="#kubernetes-配置-glusterfs" class="headerlink" title="kubernetes 配置 glusterfs"></a>kubernetes 配置 glusterfs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">官方的文档 https://github.com/kubernetes/kubernetes/tree/master/examples/volumes/glusterfs</span><br></pre></td></tr></table></figure><h2 id="kubernetes-安装客户端"><a href="#kubernetes-安装客户端" class="headerlink" title="kubernetes 安装客户端"></a>kubernetes 安装客户端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 在所有 k8s node 中安装 glusterfs 客户端</span><br><span class="line"></span><br><span class="line">yum install -y glusterfs glusterfs-fuse</span><br><span class="line"></span><br><span class="line"># 配置 hosts</span><br><span class="line"></span><br><span class="line">vi /etc/hosts</span><br><span class="line"></span><br><span class="line">gluster-1  10.6.0.52</span><br><span class="line">gluster-2  10.6.0.53</span><br><span class="line">gluster-3  10.6.0.55</span><br><span class="line">gluster-4  10.6.0.56</span><br></pre></td></tr></table></figure><h2 id="配置-endpoints"><a href="#配置-endpoints" class="headerlink" title="配置 endpoints"></a>配置 endpoints</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line"># 修改 endpoints.json ，配置 glusters 集群节点ip</span><br><span class="line"># 每一个 addresses 为一个 ip 组</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      &quot;addresses&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;ip&quot;: &quot;10.6.0.52&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;ports&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;port&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 导入 glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line">kubectl apply -f glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 endpoints 信息</span><br><span class="line">kubectl get ep</span><br></pre></td></tr></table></figure><h2 id="配置-service"><a href="#配置-service" class="headerlink" title="配置 service"></a>配置 service</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-service.json</span><br><span class="line"></span><br><span class="line"># service.json 不需要配置，里面查找的是 enpointes 的名称与端口，端口默认配置为 1</span><br><span class="line"></span><br><span class="line"># 导入 glusterfs-service.json</span><br><span class="line">kubectl apply -f glusterfs-service.json</span><br><span class="line"></span><br><span class="line"># 查看 service 信息</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><h2 id="创建-测试-pod"><a href="#创建-测试-pod" class="headerlink" title="创建 测试 pod"></a>创建 测试 pod</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-pod.json</span><br><span class="line"></span><br><span class="line"># 编辑 glusterfs-pod.json</span><br><span class="line"># 修改 volumes  下的 path 为上面创建的 volume 名称</span><br><span class="line"></span><br><span class="line">&quot;path&quot;: &quot;k8s-volume&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 导入 glusterfs-pod.json</span><br><span class="line">kubectl apply -f glusterfs-pod.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 pods 状态</span><br><span class="line">kubectl get pods               </span><br><span class="line">NAME                             READY     STATUS    RESTARTS   AGE</span><br><span class="line">glusterfs                        1/1       Running   0          1m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 pods 所在 node</span><br><span class="line"></span><br><span class="line">kubectl describe pods/glusterfs</span><br><span class="line"></span><br><span class="line"># 登陆 node 物理机 使用 df 可查看 挂载目录</span><br></pre></td></tr></table></figure><h2 id="配置-pv"><a href="#配置-pv" class="headerlink" title="配置 pv"></a>配置 pv</h2><blockquote><p>PersistentVolume（pv）和 PersistentVolumeClaim（pvc）是k8s提供的两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需关注用户如何使用，同样的用户只需要挂载pvc到容器中而不需要关注存储卷采用何种技术实现。</p></blockquote><blockquote><p>pvc和pv的关系与pod和node关系类似，前者消耗后者的资源。pvc可以向pv申请指定大小的存储资源并设置访问模式。</p></blockquote><blockquote><p>pv 属性 </p><ol><li>storage 容量</li><li>读写属性 分别为 - ReadWriteOnce：单个节点读写 , ReadOnlyMany：多节点只读 , ReadWriteMany：多节点读写 。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vi glusterfs-pv.yaml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: gluster-dev-volume</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 8Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  glusterfs:</span><br><span class="line">    endpoints: &quot;glusterfs-cluster&quot;</span><br><span class="line">    path: &quot;k8s-volume&quot;</span><br><span class="line">    readOnly: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 导入 pv</span><br><span class="line"></span><br><span class="line">kubectl apply -f glusterfs-pv.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 pv</span><br><span class="line"></span><br><span class="line">kubectl get pv</span><br></pre></td></tr></table></figure><blockquote><p>pvc 属性</p><ol><li>访问属性 与 pv 相同</li><li>容量，向pv申请的容量 &lt;= pv 总容量</li></ol></blockquote><h2 id="配置-pvc"><a href="#配置-pvc" class="headerlink" title="配置 pvc"></a>配置 pvc</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: glusterfs-nginx</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 8Gi</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 导入 pvc</span><br><span class="line">kubectl apply -f glusterfs-pvc.yaml</span><br><span class="line"></span><br><span class="line"># 查看 pvc</span><br><span class="line"></span><br><span class="line">kubectl get pv</span><br><span class="line"></span><br><span class="line"># STATUS 为 Bound ， VOLUME 为 pv name</span><br></pre></td></tr></table></figure><h2 id="创建-nginx-deployment-挂载-volume"><a href="#创建-nginx-deployment-挂载-volume" class="headerlink" title="创建 nginx  deployment 挂载 volume"></a>创建 nginx  deployment 挂载 volume</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">vi nginx-deployment.yaml</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1 </span><br><span class="line">kind: Deployment </span><br><span class="line">metadata: </span><br><span class="line">  name: nginx-dm</span><br><span class="line">spec: </span><br><span class="line">  replicas: 2</span><br><span class="line">  template: </span><br><span class="line">    metadata: </span><br><span class="line">      labels: </span><br><span class="line">        name: nginx </span><br><span class="line">    spec: </span><br><span class="line">      containers: </span><br><span class="line">        - name: nginx </span><br><span class="line">          image: nginx:alpine </span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports: </span><br><span class="line">            - containerPort: 80</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: gluster-dev-volume</span><br><span class="line">              mountPath: &quot;/usr/share/nginx/html&quot;</span><br><span class="line">      volumes:</span><br><span class="line">      - name: gluster-dev-volume</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: glusterfs-nginx</span><br><span class="line">          </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 导入 deployment</span><br><span class="line"></span><br><span class="line">kubectl apply -f nginx-deployment.yaml </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 deployment</span><br><span class="line"></span><br><span class="line">kubectl get pods |grep nginx-dm</span><br><span class="line">nginx-dm-2784556780-cnjdw        1/1       Running   0          8m</span><br><span class="line">nginx-dm-2784556780-pt8vf        1/1       Running   0          8m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看 挂载</span><br><span class="line">kubectl exec -it nginx-dm-2784556780-cnjdw -- df -h|grep k8s-volume</span><br><span class="line"></span><br><span class="line"># 创建文件 测试</span><br><span class="line"></span><br><span class="line">kubectl exec -it nginx-dm-2784556780-cnjdw -- touch /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line">kubectl exec -it nginx-dm-2784556780-pt8vf -- ls -lt /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 验证 glusterfs</span><br><span class="line"># 因为我们使用 分布式复制卷，所以可以看到2个节点中有文件</span><br><span class="line"></span><br><span class="line">[root@gluster-1 ~] ls /opt/gfs_data/</span><br><span class="line">[root@gluster-2 ~] ls /opt/gfs_data/</span><br><span class="line">[root@gluster-3 ~] ls /opt/gfs_data/</span><br><span class="line">[root@gluster-4 ~] ls /opt/gfs_data/</span><br></pre></td></tr></table></figure><h2 id="FAQ-问题"><a href="#FAQ-问题" class="headerlink" title="FAQ 问题"></a>FAQ 问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># 在使用 pv 与 pvc 的过程中遇到问题</span><br><span class="line"></span><br><span class="line"># 第一次创建 pv 与 pvc 的时候 状态都是OK的</span><br><span class="line"></span><br><span class="line"># 当删除 pvc 以后，再创建 pvc 状态一直 pending 无论如何都不正常</span><br><span class="line"></span><br><span class="line"># 查看日志 报 no persistent volumes available for this claim and no storage class is set</span><br><span class="line"></span><br><span class="line"># 这里我们可以跳过 pv 与 pvc 只需要创建一个 ep 就可以</span><br><span class="line"></span><br><span class="line"># 挂载的时候我们直接在 yaml 目录下 写 ep 就行</span><br><span class="line"></span><br><span class="line"># 如下为 deployment 的 yaml 文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apiVersion: extensions/v1beta1 </span><br><span class="line">kind: Deployment </span><br><span class="line">metadata: </span><br><span class="line">  name: nginx-dm</span><br><span class="line">spec: </span><br><span class="line">  replicas: 2</span><br><span class="line">  template: </span><br><span class="line">    metadata: </span><br><span class="line">      labels: </span><br><span class="line">        name: nginx </span><br><span class="line">    spec: </span><br><span class="line">      containers: </span><br><span class="line">        - name: nginx </span><br><span class="line">          image: nginx:alpine </span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports: </span><br><span class="line">            - containerPort: 80</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: gluster-efk-volume</span><br><span class="line">              mountPath: &quot;/usr/share/nginx/html&quot;</span><br><span class="line">      volumes:</span><br><span class="line">      - name: gluster-efk-volume</span><br><span class="line">        glusterfs:</span><br><span class="line">          endpoints: glusterfs-cluster</span><br><span class="line">          path: efk-volume</span><br><span class="line">          readOnly: False</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      kubernetes glusterfs
    
    </summary>
    
      <category term="docker" scheme="https://luolizhi.github.io/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu16.04 搭建nfs服务器</title>
    <link href="https://luolizhi.github.io/2018/12/01/ubuntu16.04%E6%90%AD%E5%BB%BAnfs%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://luolizhi.github.io/2018/12/01/ubuntu16.04搭建nfs服务器/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:45:50.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu16-04-搭建nfs服务器"><a href="#ubuntu16-04-搭建nfs服务器" class="headerlink" title="ubuntu16.04 搭建nfs服务器"></a>ubuntu16.04 搭建nfs服务器</h1><h2 id="一、服务器端："><a href="#一、服务器端：" class="headerlink" title="一、服务器端："></a>一、服务器端：</h2><h3 id="1-1安装NFS服务："><a href="#1-1安装NFS服务：" class="headerlink" title="1.1安装NFS服务："></a>1.1安装NFS服务：</h3><p>#执行以下命令安装NFS服务器，</p><p>#apt会自动安装nfs-common、rpcbind等13个软件包</p><p><code>sudo apt install nfs-kernel-server</code></p><h3 id="1-2编写配置文件："><a href="#1-2编写配置文件：" class="headerlink" title="1.2编写配置文件："></a>1.2编写配置文件：</h3><p>#编辑/etc/exports 文件：</p><p>sudo vi /etc/exports</p><p>#/etc/exports文件的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp *(rw,sync,no_subtree_check,no_root_squash)</span><br><span class="line">/data *(rw,sync,no_subtree_check,no_root_squash)</span><br><span class="line">/logs *(rw,sync,no_subtree_check,no_root_squash)</span><br></pre></td></tr></table></figure></p><h3 id="1-3创建共享目录"><a href="#1-3创建共享目录" class="headerlink" title="1.3创建共享目录"></a>1.3创建共享目录</h3><p>#在服务器端创建/tmp /data和/logs共享目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /tmp</span><br><span class="line">sudo mkdir -p /data</span><br><span class="line">sudo mkdir -p /logs</span><br></pre></td></tr></table></figure></p><h3 id="1-4重启nfs服务："><a href="#1-4重启nfs服务：" class="headerlink" title="1.4重启nfs服务："></a>1.4重启nfs服务：</h3><p><code>sudo service nfs-kernel-server restart</code></p><h3 id="1-5常用命令工具："><a href="#1-5常用命令工具：" class="headerlink" title="1.5常用命令工具："></a>1.5常用命令工具：</h3><p>#在安装NFS服务器时，已包含常用的命令行工具，无需额外安装。</p><p>#显示已经mount到本机nfs目录的客户端机器。</p><p><code>sudo showmount -e localhost</code></p><p>#将配置文件中的目录全部重新export一次！无需重启服务。</p><p><code>sudo exportfs -rv</code></p><p>#查看NFS的运行状态</p><p><code>sudo nfsstat</code></p><p>#查看rpc执行信息，可以用于检测rpc运行情况</p><p><code>sudo rpcinfo`</code></p><p>#查看网络端口，NFS默认是使用111端口。</p><p><code>sudo netstat -tu -4</code></p><h2 id="二、客户端："><a href="#二、客户端：" class="headerlink" title="二、客户端："></a>二、客户端：</h2><h3 id="2-1安装客户端工具："><a href="#2-1安装客户端工具：" class="headerlink" title="2.1安装客户端工具："></a>2.1安装客户端工具：</h3><p>#在需要连接到NFS服务器的客户端机器上，</p><p>#需要执行以下命令，安装nfs-common软件包。</p><p>#apt会自动安装nfs-common、rpcbind等12个软件包</p><p><code>sudo apt install nfs-common</code></p><h3 id="2-2查看NFS服务器上的共享目录"><a href="#2-2查看NFS服务器上的共享目录" class="headerlink" title="2.2查看NFS服务器上的共享目录"></a>2.2查看NFS服务器上的共享目录</h3><p>#显示指定的（192.168.3.167）NFS服务器上export出来的目录</p><p><code>sudo showmount -e 192.168.3.167</code></p><h3 id="2-3创建本地挂载目录"><a href="#2-3创建本地挂载目录" class="headerlink" title="2.3创建本地挂载目录"></a>2.3创建本地挂载目录</h3><p><code>sudo mkdir -p /mnt/data</code></p><p><code>sudo mkdir -p /mnt/logs</code></p><h3 id="2-4挂载共享目录"><a href="#2-4挂载共享目录" class="headerlink" title="2.4挂载共享目录"></a>2.4挂载共享目录</h3><p>#将NFS服务器192.168.3.167上的目录，挂载到本地的/mnt/目录下</p><p><code>sudo mount -t nfs 192.168.3.167:/data /mnt/data</code></p><p><code>sudo mount -t nfs 192.168.3.167:/logs /mnt/logs</code></p><p>#注：在没有安装nfs-common或者nfs-kernel-server软件包的机器上，</p><p>#直接执行showmount、exportfs、nfsstat、rpcinfo等命令时，</p><p>#系统会给出友好的提示，</p><p>#比如直接showmount会提示需要执行sudo apt install nfs-common命令，</p><p>#比如直接rpcinfo会提示需要执行sudo apt install rpcbind命令。</p><h3 id="2-5卸载文件系统命令"><a href="#2-5卸载文件系统命令" class="headerlink" title="2.5卸载文件系统命令"></a>2.5卸载文件系统命令</h3><p><code>umount /mnt/data</code><br><code>umount /mnt/logs</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu16-04-搭建nfs服务器&quot;&gt;&lt;a href=&quot;#ubuntu16-04-搭建nfs服务器&quot; class=&quot;headerlink&quot; title=&quot;ubuntu16.04 搭建nfs服务器&quot;&gt;&lt;/a&gt;ubuntu16.04 搭建nfs服务器&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="nfs" scheme="https://luolizhi.github.io/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>fastdfs 集群</title>
    <link href="https://luolizhi.github.io/2018/12/01/fastdfs%E9%9B%86%E7%BE%A4/"/>
    <id>https://luolizhi.github.io/2018/12/01/fastdfs集群/</id>
    <published>2018-12-01T02:50:27.000Z</published>
    <updated>2019-11-30T03:50:31.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastdfs-安装"><a href="#fastdfs-安装" class="headerlink" title="fastdfs 安装"></a>fastdfs 安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>Centos7.2 Final</td></tr><tr><td>FastDFS版本</td><td>fastdfs-5.11.tar.gz</td></tr><tr><td>libfastcommon</td><td><a href="https://github.com/happyfish100/libfastcommon" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon</a></td></tr><tr><td>nginx</td><td>nginx-1.14.0.tar.gz</td></tr><tr><td>fastdfs-nginx-module</td><td>fastdfs-nginx-module_1.21</td></tr></tbody></table><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>app25—tracker   192.168.77.76  fastdfs，fastcommon，nginx</p><p>app26—storage   192.168.77.77  fastdfs，fastcommon，nginx，fastdfs-nginx-module<br>app27—storage   192.168.77.78  fastdfs，fastcommon，nginx，fastdfs-nginx-module</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../images/fdfs架构图.jpg" alt="fdfs架构图" title>                </div>                <div class="image-caption">fdfs架构图</div>            </figure><h2 id="安装libfastcommon，fastdfs-（所有节点）"><a href="#安装libfastcommon，fastdfs-（所有节点）" class="headerlink" title="安装libfastcommon，fastdfs （所有节点）"></a>安装libfastcommon，fastdfs （所有节点）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># fastcommon</span><br><span class="line">wget https://github.com/happyfish100/libfastcommon.git </span><br><span class="line">#安装libfastcommon-master(与libfastcommon不同，里面多了很多头文件)</span><br><span class="line">tar zxvf libfastcommon-master.tar.gz</span><br><span class="line">cd libfastcommon-master/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br><span class="line"></span><br><span class="line"># fastdfs安装</span><br><span class="line">wget https://github.com/happyfish100/fastdfs/archive/V5.11.tar.gz</span><br><span class="line">cd fastdfs-5.11/</span><br><span class="line">./make.sh</span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><h2 id="tracker配置-（192-168-77-76）"><a href="#tracker配置-（192-168-77-76）" class="headerlink" title="tracker配置 （192.168.77.76）"></a>tracker配置 （192.168.77.76）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/</span><br><span class="line">cd /etc/fdfs/</span><br><span class="line">cp tracker.conf.sample tracker.conf</span><br><span class="line">vim tracker.conf</span><br><span class="line">#修改参数</span><br><span class="line">base_path=/data/fastdfs</span><br></pre></td></tr></table></figure><ul><li><p>创建软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/bin/fdfs_trackerd /usr/local/bin/</span><br><span class="line">ln -s /usr/bin/stop.sh /usr/local/bin/</span><br><span class="line">ln -s /usr/bin/restart.sh /usr/local/bin/</span><br></pre></td></tr></table></figure></li><li><p>启动服务<br><code>service fdfs_trackerd start</code> 或者<br>  /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart    `</p></li><li>查看监听<br><code>netstat -nltp|grep fdfs</code></li></ul><h2 id="storage配置（192-168-77-77，192-168-77-78）"><a href="#storage配置（192-168-77-77，192-168-77-78）" class="headerlink" title="storage配置（192.168.77.77，192.168.77.78）"></a>storage配置（192.168.77.77，192.168.77.78）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/storage</span><br><span class="line">cd /etc/fdfs/</span><br><span class="line">cp storage.conf.sample storage.conf</span><br><span class="line">vim storage.conf</span><br><span class="line">#修改下面参数</span><br><span class="line"># the base path to store data and log files</span><br><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"># store_path#, based 0, if store_path0 not exists, it&apos;s value is base_path</span><br><span class="line"># the paths must be exist</span><br><span class="line">store_path0=/data/fastdfs/storage</span><br><span class="line">#store_path1=/home/yuqing/fastdfs2</span><br><span class="line"># tracker_server can ocur more than once, and tracker_server format is</span><br><span class="line">#  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class="line">tracker_server=192.168.77.76:22122</span><br></pre></td></tr></table></figure><ul><li>创建软链接<br><code>ln -s /usr/bin/fdfs_storaged /usr/local/bin/</code></li><li>启动服务<br><code>service fdfs_storaged start</code> 或者<br><code>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></li><li>查看监听<br><code>/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</code></li></ul><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local     </span><br><span class="line">#最后添加  </span><br><span class="line">/etc/init.d/fdfs_storaged start</span><br></pre></td></tr></table></figure><p>省略软连接设置自启动<br><code>echo &#39;/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart&#39; &gt;&gt; /etc/rc.d/rc.local</code></p><h2 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h2><p>通常，对于图片和文件的访问，是不太可能走TCP，而是通过简单的HTTP访问，这时需要通过一些Web服务器(如nginx，apache)来代理，fastdfs也有了nginx的支持，下面则将通过安装nginx来完成文件访问，之前的开发环境将变为：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../images/fdfs结合nginx配置图.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><br>此时已经可以上传，下载还需要安装nginx和fastdfs-nginx-module，安装完成后一起测试</p><h3 id="完整的文件服务器架构图："><a href="#完整的文件服务器架构图：" class="headerlink" title="完整的文件服务器架构图："></a>完整的文件服务器架构图：</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="../images/fdfs完整配置图.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure><h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><ul><li><h3 id="tracker上只安装nginx"><a href="#tracker上只安装nginx" class="headerlink" title="tracker上只安装nginx"></a>tracker上只安装nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 源码安装</span><br><span class="line">wget http://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line">sudo apt-get install -y  libpcre3 libpcre3-dev zlib1g-dev   openssl libssl-dev   //安装依赖库</span><br><span class="line">yum -y  install pcre-devel opensslopenssl-devel  zlib-devel  //centos7 安装依赖库</span><br><span class="line">cd  nginx-1.14.0/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>主要配置文件：/usr/local/nginx/conf/nginx.conf<br> /etc/init.d/下创建了启动脚本nginx（需手动配置）<br>程序文件放在/usr/local/nginx/sbin/nginx<br>日志放在了/var/log/nginx中<br>虚拟主机的目录设置在/var/www/下</p></blockquote><p>  默认启动<br><code>/usr/local/nginx/sbin/nginx</code></p><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>在默认配置文件（/usr/local/nginx/conf/nginx.conf）中80行增加<br>include /usr/local/nginx/conf.d/*.conf  ;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/nginx/conf.d</span><br><span class="line">cd /usr/local/nginx/conf.d</span><br><span class="line">vim fastdfs.conf</span><br><span class="line"></span><br><span class="line"># group1的Storage集群</span><br><span class="line">upstream group1_cluster &#123;</span><br><span class="line">    server 10.0.0.132;</span><br><span class="line">    server 10.0.0.134;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  10.0.0.133;</span><br><span class="line"></span><br><span class="line">    location /group1 &#123;</span><br><span class="line">        proxy_pass              http://group1_cluster;</span><br><span class="line">        proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header        Host $http_host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="storage上安装nginx和fastdfs-nginx-module-（192-168-77-77，192-168-77-78）"><a href="#storage上安装nginx和fastdfs-nginx-module-（192-168-77-77，192-168-77-78）" class="headerlink" title="storage上安装nginx和fastdfs-nginx-module （192.168.77.77，192.168.77.78）"></a>storage上安装nginx和fastdfs-nginx-module （192.168.77.77，192.168.77.78）</h3>将fastdfs-nginx-module目录下面的mod_fastdfs.conf拷贝到/etc/fdfs/<br>将fastdfs-5.11目录下面的http.conf，mime.types拷贝到/etc/fdfs/<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 配置fastdfs-nginx-module所需的配置文件mod_fastdfs.conf，http.conf，mime.types</span><br><span class="line"></span><br><span class="line"># vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"></span><br><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line">tracker_server=10.0.0.133:22122</span><br><span class="line">group_name=group1</span><br><span class="line">url_have_group_name = true</span><br><span class="line">store_path_count=1</span><br><span class="line">store_path0=/data/fastdfs/storage</span><br></pre></td></tr></table></figure></li></ul><p>源码安装nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#下载解压安装依赖库同上面nginx安装</span><br><span class="line">./configure --add-module=../fastdfs-nginx-module-master/src/</span><br><span class="line">make  &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>可能的报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/include/fastdfs/fdfs_define.h:15:27: fatal error: common_define.h: No such file or directory</span><br><span class="line"> #include &quot;common_define.h&quot;</span><br><span class="line"></span><br><span class="line">#解决方案</span><br><span class="line">cp /usr/include/fastcommon/* /usr/include/</span><br></pre></td></tr></table></figure></p><p>nginx最简单配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 最简配置/usr/local/nginx/conf/nginx.conf</span><br><span class="line"># user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http &#123;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"> </span><br><span class="line">        # group1为该Storage所在的group</span><br><span class="line">        location ~ /group1/M00 &#123; </span><br><span class="line">            # 该Storage的data目录</span><br><span class="line">            root /mnt/fastdfs/data;</span><br><span class="line">            # 由于fastdfs保存的文件名已经编码，源文件名将丢失，应用可通过在请求url后加oname参数指定源文件名</span><br><span class="line">            if ($arg_oname != &apos;&apos;)&#123;</span><br><span class="line">                add_header Content-Disposition &quot;attachment;filename=$arg_oname&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">            # 调用nginx-fastdfs-module模块</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动nginx,不报错即成功<br><code>/usr/local/nginx/sbin/nginx</code></p><p>开机自启动<br><code>echo &#39;/usr/local/nginx/sbin/nginx &#39; &gt;&gt; /etc/rc.d/rc.local</code></p><h2 id="在tracker上操作集群，上传下载"><a href="#在tracker上操作集群，上传下载" class="headerlink" title="在tracker上操作集群，上传下载"></a>在tracker上操作集群，上传下载</h2><p>修改/etc/fdfs/client.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base_path=/data/fastdfs</span><br><span class="line">tracker_server=10.0.0.133:22122</span><br></pre></td></tr></table></figure></p><p>查看集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/test/hello.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#结果</span><br><span class="line"></span><br><span class="line">This is FastDFS client test program v5.11</span><br><span class="line"></span><br><span class="line">Copyright (C) 2008, Happy Fish / YuQing</span><br><span class="line"></span><br><span class="line">FastDFS may be copied only under the terms of the GNU General</span><br><span class="line">Public License V3, which may be found in the FastDFS source kit.</span><br><span class="line">Please visit the FastDFS Home Page http://www.csource.org/ </span><br><span class="line">for more detail.</span><br><span class="line"></span><br><span class="line">[2018-07-31 07:38:11] DEBUG - base_path=/data/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0</span><br><span class="line"></span><br><span class="line">tracker_query_storage_store_list_without_group: </span><br><span class="line">server 1. group_name=, ip_addr=10.0.0.134, port=23000</span><br><span class="line">server 2. group_name=, ip_addr=10.0.1.92, port=23000</span><br><span class="line"></span><br><span class="line">group_name=group1, ip_addr=10.0.0.134, port=23000</span><br><span class="line">storage_upload_by_filename</span><br><span class="line">group_name=group1, remote_filename=M00/00/00/CgAAhltgEeOAGIdUAAAADBSRxKc586.txt</span><br><span class="line">source ip address: 10.0.0.134</span><br><span class="line">file timestamp=2018-07-31 07:38:11</span><br><span class="line">file size=12</span><br><span class="line">file crc32=345097383</span><br><span class="line">example file url: http://10.0.0.134/group1/M00/00/00/CgAAhltgEeOAGIdUAAAADBSRxKc586.txt</span><br><span class="line">storage_upload_slave_by_filename</span><br><span class="line">group_name=group1, remote_filename=M00/00/00/CgAAhltgEeOAGIdUAAAADBSRxKc586_big.txt</span><br><span class="line">source ip address: 10.0.0.134</span><br><span class="line">file timestamp=2018-07-31 07:38:11</span><br><span class="line">file size=12</span><br><span class="line">file crc32=345097383</span><br><span class="line">example file url: http://10.0.0.134/group1/M00/00/00/CgAAhltgEeOAGIdUAAAADBSRxKc586_big.txt</span><br></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf download group1 M00/00/00/CgAAhltgEeOAGIdUAAAADBSRxKc586.txt</span><br><span class="line"></span><br><span class="line">结果</span><br><span class="line">storage=10.0.0.134:23000</span><br><span class="line">download file success, file size=12, file save to CgAAhltgEeOAGIdUAAAADBSRxKc586.txt</span><br></pre></td></tr></table></figure><p>配置详解<br><a href="https://blog.csdn.net/Poechant/article/details/6996047" target="_blank" rel="noopener">FastDFS的配置、部署与API使用解读（6）FastDFS配置详解之Storage配置 - CSDN博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fastdfs-安装&quot;&gt;&lt;a href=&quot;#fastdfs-安装&quot; class=&quot;headerlink&quot; title=&quot;fastdfs 安装&quot;&gt;&lt;/a&gt;fastdfs 安装&lt;/h1&gt;&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="fastdfs" scheme="https://luolizhi.github.io/tags/fastdfs/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes源码结构</title>
    <link href="https://luolizhi.github.io/2018/04/11/kubernetes%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <id>https://luolizhi.github.io/2018/04/11/kubernetes源码结构/</id>
    <published>2018-04-11T06:24:00.000Z</published>
    <updated>2019-11-29T11:45:41.530Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>kubernetes源码地址：<a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes</a></p></blockquote><h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>kubernetes源码主要分为包括pkg、cmd、plugin、test四个目录。其中各个包的主要功能如下：</p><p>1.pkg是kubernetes的主体代码，里面实现了kubernetes的主体逻辑。</p><p>2.cmd是kubernetes的所有后台进程的代码，主要是各个子模块的启动代码，具体的实现逻辑在pkg下。</p><p>3.plugin主要是kube-scheduler和一些插件</p><h2 id="主要包功能介绍"><a href="#主要包功能介绍" class="headerlink" title="主要包功能介绍"></a>主要包功能介绍</h2><p>以下简要介绍一下各个子包的功能</p><h3 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a>pkg</h3><table><thead><tr><th>包名</th><th>用途</th></tr></thead><tbody><tr><td>api</td><td>kubernetes api主要包括最新版本的Rest API接口的类，并提供数据格式验证转换工具类，对应版本号文件夹下的文件描述了特定的版本如何序列化存储和网络</td></tr><tr><td>client</td><td>Kubernetes 中公用的客户端部分，实现对对象的具体操作增删该查操作</td></tr><tr><td>cloudprovider</td><td>kubernetes 提供对aws、azure、gce、cloudstack、mesos等云供应商提供了接口支持，目前包括负载均衡、实例、zone信息、路由信息等</td></tr><tr><td>controller</td><td>kubernetes controller主要包括各个controller的实现逻辑，为各类资源如replication、endpoint、node等的增删改等逻辑提供派发和执行</td></tr><tr><td>credentialprovider</td><td>kubernetes credentialprovider 为docker 镜像仓库贡献者提供权限认证</td></tr><tr><td>generated</td><td>kubernetes generated包是所有生成的文件的目标文件，一般这里面的文件日常是不进行改动的</td></tr><tr><td>kubectl</td><td>kuernetes kubectl模块是kubernetes的命令行工具，提供apiserver的各个接口的命令行操作，包括各类资源的增删改查、扩容等一系列命令工具</td></tr><tr><td>kubelet</td><td>kuernetes kubelet模块是kubernetes的核心模块，该模块负责node层的pod管理，完成pod及容器的创建，执行pod的删除同步等操作等等</td></tr><tr><td>master</td><td>kubernetes master负责集群中master节点的运行管理、api安装、各个组件的运行端口分配、NodeRegistry、PodRegistry等的创建工作</td></tr><tr><td>runtime</td><td>kubernetes runtime实现不同版本api之间的适配，实现不同api版本之间数据结构的转换</td></tr></tbody></table><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><p>包括kubernetes所以后台进程的代码包括apiserver、controller manager、proxy、kubelet等进程</p><h3 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h3><p>主要包括调度模块的代码实现，用于执行具体的Scheduler的调度工作，认证等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;kubernetes源码地址：&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kubernet
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
      <category term="源码" scheme="https://luolizhi.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes中pod时区，与node主机同步</title>
    <link href="https://luolizhi.github.io/2018/04/03/Kubernetes%E4%B8%ADpod%E6%97%B6%E5%8C%BA%EF%BC%8C%E4%B8%8Enode%E4%B8%BB%E6%9C%BA%E5%90%8C%E6%AD%A5/"/>
    <id>https://luolizhi.github.io/2018/04/03/Kubernetes中pod时区，与node主机同步/</id>
    <published>2018-04-03T02:52:04.000Z</published>
    <updated>2019-11-29T11:45:41.524Z</updated>
    
    <content type="html"><![CDATA[<p>k8s集群中的pod时间与主机不同步，解决这个问题基本上可以有两种思路：</p><ul><li>直接修改镜像的时间设置，好处是应用部署时无需做特殊设置，但是需要手动构建Docker镜像。</li><li>部署应用时，单独读取主机的“/etc/localtime”文件，即创建pod时同步时区，无需修改镜像，但是每个应用都要单独设置。</li></ul><p>这里为了快速、简单的解决这个问题，先使用第二种方案，yaml文件中设置时区同步，只需要映射主机的“/etc/localtime”文件。</p><p>这里给出一个demo<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test-jar-service.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-jar</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-jar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># if your cluster supports it, uncomment the following to automatically create</span></span><br><span class="line">  <span class="comment"># an external load-balanced IP for the frontend service.</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#    targetPort: 8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-jar</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-jar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test-jar</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-jar</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">lukey123/kubernetes:test-jar</span></span><br><span class="line"><span class="comment">#        resources:</span></span><br><span class="line"><span class="comment">#          requests:</span></span><br><span class="line"><span class="comment">#            cpu: 100m</span></span><br><span class="line"><span class="comment">#            memory: 100Mi</span></span><br><span class="line"><span class="comment">#        env:</span></span><br><span class="line"><span class="comment">#        - name: GET_HOSTS_FROM</span></span><br><span class="line"><span class="comment">#          value: dns</span></span><br><span class="line">          <span class="comment"># If your cluster config does not include a dns service, then to</span></span><br><span class="line">          <span class="comment"># instead access environment variables to find service host</span></span><br><span class="line">          <span class="comment"># info, comment out the 'value: dns' line above, and uncomment the</span></span><br><span class="line">          <span class="comment"># line below:</span></span><br><span class="line">          <span class="comment"># value: env</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></p><p>修改后的yaml文件为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-jar</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-jar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># if your cluster supports it, uncomment the following to automatically create</span></span><br><span class="line">  <span class="comment"># an external load-balanced IP for the frontend service.</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#    targetPort: 8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-jar</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-jar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test-jar</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-jar</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">lukey123/kubernetes:test-jar</span></span><br><span class="line">        <span class="attr">volumeMounts:</span> <span class="comment">#这里是增加的部分</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-time</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="comment">#        resources:</span></span><br><span class="line"><span class="comment">#          requests:</span></span><br><span class="line"><span class="comment">#            cpu: 100m</span></span><br><span class="line"><span class="comment">#            memory: 100Mi</span></span><br><span class="line"><span class="comment">#        env:</span></span><br><span class="line"><span class="comment">#        - name: GET_HOSTS_FROM</span></span><br><span class="line"><span class="comment">#          value: dns</span></span><br><span class="line">          <span class="comment"># If your cluster config does not include a dns service, then to</span></span><br><span class="line">          <span class="comment"># instead access environment variables to find service host</span></span><br><span class="line">          <span class="comment"># info, comment out the 'value: dns' line above, and uncomment the</span></span><br><span class="line">          <span class="comment"># line below:</span></span><br><span class="line">          <span class="comment"># value: env</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">volumes:</span> <span class="comment">#这里是增加的部分</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-time</span></span><br><span class="line">         <span class="attr">hostPath:</span></span><br><span class="line">           <span class="attr">path:</span> <span class="string">/etc/localtime</span></span><br></pre></td></tr></table></figure><p>接着进入pod执行就可以看到时间已经同步了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it <span class="built_in">test</span>-jar-57d5474cbc-dv7xr  /bin/sh</span><br><span class="line"><span class="comment"># date</span></span><br><span class="line">Tue Apr  3 10:40:15 CST 2018</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;k8s集群中的pod时间与主机不同步，解决这个问题基本上可以有两种思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接修改镜像的时间设置，好处是应用部署时无需做特殊设置，但是需要手动构建Docker镜像。&lt;/li&gt;
&lt;li&gt;部署应用时，单独读取主机的“/etc/localtime”文件，
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://luolizhi.github.io/tags/kubernetes/"/>
    
      <category term="pod" scheme="https://luolizhi.github.io/tags/pod/"/>
    
  </entry>
  
</feed>
